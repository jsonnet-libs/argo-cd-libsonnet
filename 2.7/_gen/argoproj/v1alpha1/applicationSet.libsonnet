{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='applicationSet', url='', help=''),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of ApplicationSet', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'argoproj.io/v1alpha1',
    kind: 'ApplicationSet',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help=''),
  spec: {
    '#generators':: d.obj(help=''),
    generators: {
      '#clusterDecisionResource':: d.obj(help=''),
      clusterDecisionResource: {
        '#labelSelector':: d.obj(help=''),
        labelSelector: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { clusterDecisionResource+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { clusterDecisionResource+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
          '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabels(matchLabels): { clusterDecisionResource+: { labelSelector+: { matchLabels: matchLabels } } },
          '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabelsMixin(matchLabels): { clusterDecisionResource+: { labelSelector+: { matchLabels+: matchLabels } } },
        },
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { clusterDecisionResource+: { template+: { metadata+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { clusterDecisionResource+: { template+: { metadata+: { annotations+: annotations } } } },
            '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizers(finalizers): { clusterDecisionResource+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizersMixin(finalizers): { clusterDecisionResource+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { clusterDecisionResource+: { template+: { metadata+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { clusterDecisionResource+: { template+: { metadata+: { labels+: labels } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { clusterDecisionResource+: { template+: { metadata+: { name: name } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { clusterDecisionResource+: { template+: { metadata+: { namespace: namespace } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#destination':: d.obj(help=''),
            destination: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { clusterDecisionResource+: { template+: { spec+: { destination+: { name: name } } } } },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { clusterDecisionResource+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
              '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
              withServer(server): { clusterDecisionResource+: { template+: { spec+: { destination+: { server: server } } } } },
            },
            '#ignoreDifferences':: d.obj(help=''),
            ignoreDifferences: {
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { group: group },
              '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { kind: kind },
              '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { namespace: namespace },
            },
            '#info':: d.obj(help=''),
            info: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#source':: d.obj(help=''),
            source: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { clusterDecisionResource+: { template+: { spec+: { source+: { chart: chart } } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { clusterDecisionResource+: { template+: { spec+: { source+: { path: path } } } } },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { clusterDecisionResource+: { template+: { spec+: { source+: { ref: ref } } } } },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { clusterDecisionResource+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { clusterDecisionResource+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
            },
            '#sources':: d.obj(help=''),
            sources: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { directory+: { exclude: exclude } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { directory+: { include: include } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { directory+: { recurse: recurse } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { helm+: { values: values } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { helm+: { version: version } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { kustomize+: { namespace: namespace } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { kustomize+: { version: version } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { plugin+: { name: name } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { chart: chart },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { ref: ref },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { repoURL: repoURL },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { targetRevision: targetRevision },
            },
            '#syncPolicy':: d.obj(help=''),
            syncPolicy: {
              '#automated':: d.obj(help=''),
              automated: {
                '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                withAllowEmpty(allowEmpty): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                withPrune(prune): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                withSelfHeal(selfHeal): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
              },
              '#managedNamespaceMetadata':: d.obj(help=''),
              managedNamespaceMetadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
              },
              '#retry':: d.obj(help=''),
              retry: {
                '#backoff':: d.obj(help=''),
                backoff: {
                  '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                  withDuration(duration): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                  '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                  withFactor(factor): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                  '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                  withMaxDuration(maxDuration): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                },
                '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                withLimit(limit): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
              },
              '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptions(syncOptions): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
              '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptionsMixin(syncOptions): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
            },
            '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferences(ignoreDifferences): { clusterDecisionResource+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferencesMixin(ignoreDifferences): { clusterDecisionResource+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
            withInfo(info): { clusterDecisionResource+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
            '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
            withInfoMixin(info): { clusterDecisionResource+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
            '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
            withProject(project): { clusterDecisionResource+: { template+: { spec+: { project: project } } } },
            '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
            withRevisionHistoryLimit(revisionHistoryLimit): { clusterDecisionResource+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
            '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
            withSources(sources): { clusterDecisionResource+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
            '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
            withSourcesMixin(sources): { clusterDecisionResource+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
          },
        },
        '#withConfigMapRef':: d.fn(help='', args=[d.arg(name='configMapRef', type=d.T.string)]),
        withConfigMapRef(configMapRef): { clusterDecisionResource+: { configMapRef: configMapRef } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { clusterDecisionResource+: { name: name } },
        '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
        withRequeueAfterSeconds(requeueAfterSeconds): { clusterDecisionResource+: { requeueAfterSeconds: requeueAfterSeconds } },
        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.object)]),
        withValues(values): { clusterDecisionResource+: { values: values } },
        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.object)]),
        withValuesMixin(values): { clusterDecisionResource+: { values+: values } },
      },
      '#clusters':: d.obj(help=''),
      clusters: {
        '#selector':: d.obj(help=''),
        selector: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { clusters+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { clusters+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
          '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabels(matchLabels): { clusters+: { selector+: { matchLabels: matchLabels } } },
          '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabelsMixin(matchLabels): { clusters+: { selector+: { matchLabels+: matchLabels } } },
        },
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { clusters+: { template+: { metadata+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { clusters+: { template+: { metadata+: { annotations+: annotations } } } },
            '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizers(finalizers): { clusters+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizersMixin(finalizers): { clusters+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { clusters+: { template+: { metadata+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { clusters+: { template+: { metadata+: { labels+: labels } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { clusters+: { template+: { metadata+: { name: name } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { clusters+: { template+: { metadata+: { namespace: namespace } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#destination':: d.obj(help=''),
            destination: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { clusters+: { template+: { spec+: { destination+: { name: name } } } } },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { clusters+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
              '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
              withServer(server): { clusters+: { template+: { spec+: { destination+: { server: server } } } } },
            },
            '#ignoreDifferences':: d.obj(help=''),
            ignoreDifferences: {
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { group: group },
              '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { kind: kind },
              '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { namespace: namespace },
            },
            '#info':: d.obj(help=''),
            info: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#source':: d.obj(help=''),
            source: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { clusters+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { clusters+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { clusters+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { clusters+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { clusters+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { clusters+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { clusters+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { clusters+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { clusters+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { clusters+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { clusters+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { clusters+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { clusters+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { clusters+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { clusters+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { clusters+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { clusters+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { clusters+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { clusters+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { clusters+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { clusters+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { clusters+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { clusters+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { clusters+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { clusters+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { clusters+: { template+: { spec+: { source+: { chart: chart } } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { clusters+: { template+: { spec+: { source+: { path: path } } } } },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { clusters+: { template+: { spec+: { source+: { ref: ref } } } } },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { clusters+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { clusters+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
            },
            '#sources':: d.obj(help=''),
            sources: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { directory+: { exclude: exclude } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { directory+: { include: include } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { directory+: { recurse: recurse } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { helm+: { values: values } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { helm+: { version: version } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { kustomize+: { namespace: namespace } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { kustomize+: { version: version } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { plugin+: { name: name } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { chart: chart },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { ref: ref },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { repoURL: repoURL },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { targetRevision: targetRevision },
            },
            '#syncPolicy':: d.obj(help=''),
            syncPolicy: {
              '#automated':: d.obj(help=''),
              automated: {
                '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                withAllowEmpty(allowEmpty): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                withPrune(prune): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                withSelfHeal(selfHeal): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
              },
              '#managedNamespaceMetadata':: d.obj(help=''),
              managedNamespaceMetadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
              },
              '#retry':: d.obj(help=''),
              retry: {
                '#backoff':: d.obj(help=''),
                backoff: {
                  '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                  withDuration(duration): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                  '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                  withFactor(factor): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                  '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                  withMaxDuration(maxDuration): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                },
                '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                withLimit(limit): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
              },
              '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptions(syncOptions): { clusters+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
              '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptionsMixin(syncOptions): { clusters+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
            },
            '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferences(ignoreDifferences): { clusters+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferencesMixin(ignoreDifferences): { clusters+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
            withInfo(info): { clusters+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
            '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
            withInfoMixin(info): { clusters+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
            '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
            withProject(project): { clusters+: { template+: { spec+: { project: project } } } },
            '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
            withRevisionHistoryLimit(revisionHistoryLimit): { clusters+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
            '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
            withSources(sources): { clusters+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
            '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
            withSourcesMixin(sources): { clusters+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
          },
        },
        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.object)]),
        withValues(values): { clusters+: { values: values } },
        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.object)]),
        withValuesMixin(values): { clusters+: { values+: values } },
      },
      '#git':: d.obj(help=''),
      git: {
        '#directories':: d.obj(help=''),
        directories: {
          '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.boolean)]),
          withExclude(exclude): { exclude: exclude },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { path: path },
        },
        '#files':: d.obj(help=''),
        files: {
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { path: path },
        },
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { git+: { template+: { metadata+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { git+: { template+: { metadata+: { annotations+: annotations } } } },
            '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizers(finalizers): { git+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizersMixin(finalizers): { git+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { git+: { template+: { metadata+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { git+: { template+: { metadata+: { labels+: labels } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { git+: { template+: { metadata+: { name: name } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { git+: { template+: { metadata+: { namespace: namespace } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#destination':: d.obj(help=''),
            destination: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { git+: { template+: { spec+: { destination+: { name: name } } } } },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { git+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
              '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
              withServer(server): { git+: { template+: { spec+: { destination+: { server: server } } } } },
            },
            '#ignoreDifferences':: d.obj(help=''),
            ignoreDifferences: {
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { group: group },
              '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { kind: kind },
              '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { namespace: namespace },
            },
            '#info':: d.obj(help=''),
            info: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#source':: d.obj(help=''),
            source: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { git+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { git+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { git+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { git+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { git+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { git+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { git+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { git+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { git+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { git+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { git+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { git+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { git+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { git+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { git+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { git+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { git+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { git+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { git+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { git+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { git+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { git+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { git+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { git+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { git+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { git+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { git+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { git+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { git+: { template+: { spec+: { source+: { chart: chart } } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { git+: { template+: { spec+: { source+: { path: path } } } } },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { git+: { template+: { spec+: { source+: { ref: ref } } } } },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { git+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { git+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
            },
            '#sources':: d.obj(help=''),
            sources: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { directory+: { exclude: exclude } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { directory+: { include: include } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { directory+: { recurse: recurse } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { helm+: { values: values } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { helm+: { version: version } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { kustomize+: { namespace: namespace } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { kustomize+: { version: version } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { plugin+: { name: name } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { chart: chart },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { ref: ref },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { repoURL: repoURL },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { targetRevision: targetRevision },
            },
            '#syncPolicy':: d.obj(help=''),
            syncPolicy: {
              '#automated':: d.obj(help=''),
              automated: {
                '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                withAllowEmpty(allowEmpty): { git+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                withPrune(prune): { git+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                withSelfHeal(selfHeal): { git+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
              },
              '#managedNamespaceMetadata':: d.obj(help=''),
              managedNamespaceMetadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
              },
              '#retry':: d.obj(help=''),
              retry: {
                '#backoff':: d.obj(help=''),
                backoff: {
                  '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                  withDuration(duration): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                  '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                  withFactor(factor): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                  '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                  withMaxDuration(maxDuration): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                },
                '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                withLimit(limit): { git+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
              },
              '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptions(syncOptions): { git+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
              '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptionsMixin(syncOptions): { git+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
            },
            '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferences(ignoreDifferences): { git+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferencesMixin(ignoreDifferences): { git+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
            withInfo(info): { git+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
            '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
            withInfoMixin(info): { git+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
            '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
            withProject(project): { git+: { template+: { spec+: { project: project } } } },
            '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
            withRevisionHistoryLimit(revisionHistoryLimit): { git+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
            '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
            withSources(sources): { git+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
            '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
            withSourcesMixin(sources): { git+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
          },
        },
        '#withDirectories':: d.fn(help='', args=[d.arg(name='directories', type=d.T.array)]),
        withDirectories(directories): { git+: { directories: if std.isArray(v=directories) then directories else [directories] } },
        '#withDirectoriesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='directories', type=d.T.array)]),
        withDirectoriesMixin(directories): { git+: { directories+: if std.isArray(v=directories) then directories else [directories] } },
        '#withFiles':: d.fn(help='', args=[d.arg(name='files', type=d.T.array)]),
        withFiles(files): { git+: { files: if std.isArray(v=files) then files else [files] } },
        '#withFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='files', type=d.T.array)]),
        withFilesMixin(files): { git+: { files+: if std.isArray(v=files) then files else [files] } },
        '#withPathParamPrefix':: d.fn(help='', args=[d.arg(name='pathParamPrefix', type=d.T.string)]),
        withPathParamPrefix(pathParamPrefix): { git+: { pathParamPrefix: pathParamPrefix } },
        '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
        withRepoURL(repoURL): { git+: { repoURL: repoURL } },
        '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
        withRequeueAfterSeconds(requeueAfterSeconds): { git+: { requeueAfterSeconds: requeueAfterSeconds } },
        '#withRevision':: d.fn(help='', args=[d.arg(name='revision', type=d.T.string)]),
        withRevision(revision): { git+: { revision: revision } },
      },
      '#list':: d.obj(help=''),
      list: {
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { list+: { template+: { metadata+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { list+: { template+: { metadata+: { annotations+: annotations } } } },
            '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizers(finalizers): { list+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizersMixin(finalizers): { list+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { list+: { template+: { metadata+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { list+: { template+: { metadata+: { labels+: labels } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { list+: { template+: { metadata+: { name: name } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { list+: { template+: { metadata+: { namespace: namespace } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#destination':: d.obj(help=''),
            destination: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { list+: { template+: { spec+: { destination+: { name: name } } } } },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { list+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
              '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
              withServer(server): { list+: { template+: { spec+: { destination+: { server: server } } } } },
            },
            '#ignoreDifferences':: d.obj(help=''),
            ignoreDifferences: {
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { group: group },
              '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { kind: kind },
              '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { namespace: namespace },
            },
            '#info':: d.obj(help=''),
            info: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#source':: d.obj(help=''),
            source: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { list+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { list+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { list+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { list+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { list+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { list+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { list+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { list+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { list+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { list+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { list+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { list+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { list+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { list+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { list+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { list+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { list+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { list+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { list+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { list+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { list+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { list+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { list+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { list+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { list+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { list+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { list+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { list+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { list+: { template+: { spec+: { source+: { chart: chart } } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { list+: { template+: { spec+: { source+: { path: path } } } } },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { list+: { template+: { spec+: { source+: { ref: ref } } } } },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { list+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { list+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
            },
            '#sources':: d.obj(help=''),
            sources: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { directory+: { exclude: exclude } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { directory+: { include: include } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { directory+: { recurse: recurse } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { helm+: { values: values } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { helm+: { version: version } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { kustomize+: { namespace: namespace } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { kustomize+: { version: version } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { plugin+: { name: name } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { chart: chart },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { ref: ref },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { repoURL: repoURL },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { targetRevision: targetRevision },
            },
            '#syncPolicy':: d.obj(help=''),
            syncPolicy: {
              '#automated':: d.obj(help=''),
              automated: {
                '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                withAllowEmpty(allowEmpty): { list+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                withPrune(prune): { list+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                withSelfHeal(selfHeal): { list+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
              },
              '#managedNamespaceMetadata':: d.obj(help=''),
              managedNamespaceMetadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
              },
              '#retry':: d.obj(help=''),
              retry: {
                '#backoff':: d.obj(help=''),
                backoff: {
                  '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                  withDuration(duration): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                  '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                  withFactor(factor): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                  '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                  withMaxDuration(maxDuration): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                },
                '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                withLimit(limit): { list+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
              },
              '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptions(syncOptions): { list+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
              '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptionsMixin(syncOptions): { list+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
            },
            '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferences(ignoreDifferences): { list+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferencesMixin(ignoreDifferences): { list+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
            withInfo(info): { list+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
            '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
            withInfoMixin(info): { list+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
            '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
            withProject(project): { list+: { template+: { spec+: { project: project } } } },
            '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
            withRevisionHistoryLimit(revisionHistoryLimit): { list+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
            '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
            withSources(sources): { list+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
            '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
            withSourcesMixin(sources): { list+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
          },
        },
        '#withElements':: d.fn(help='', args=[d.arg(name='elements', type=d.T.array)]),
        withElements(elements): { list+: { elements: if std.isArray(v=elements) then elements else [elements] } },
        '#withElementsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='elements', type=d.T.array)]),
        withElementsMixin(elements): { list+: { elements+: if std.isArray(v=elements) then elements else [elements] } },
        '#withElementsYaml':: d.fn(help='', args=[d.arg(name='elementsYaml', type=d.T.string)]),
        withElementsYaml(elementsYaml): { list+: { elementsYaml: elementsYaml } },
      },
      '#matrix':: d.obj(help=''),
      matrix: {
        '#generators':: d.obj(help=''),
        generators: {
          '#clusterDecisionResource':: d.obj(help=''),
          clusterDecisionResource: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { clusterDecisionResource+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { clusterDecisionResource+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { clusterDecisionResource+: { labelSelector+: { matchLabels: matchLabels } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { clusterDecisionResource+: { labelSelector+: { matchLabels+: matchLabels } } },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { clusterDecisionResource+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { clusterDecisionResource+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { clusterDecisionResource+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { clusterDecisionResource+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { clusterDecisionResource+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { clusterDecisionResource+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { clusterDecisionResource+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { clusterDecisionResource+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { clusterDecisionResource+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { clusterDecisionResource+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { clusterDecisionResource+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { clusterDecisionResource+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { clusterDecisionResource+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { clusterDecisionResource+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { clusterDecisionResource+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { clusterDecisionResource+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { clusterDecisionResource+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { clusterDecisionResource+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { clusterDecisionResource+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { clusterDecisionResource+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { clusterDecisionResource+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { clusterDecisionResource+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { clusterDecisionResource+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { clusterDecisionResource+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withConfigMapRef':: d.fn(help='', args=[d.arg(name='configMapRef', type=d.T.string)]),
            withConfigMapRef(configMapRef): { clusterDecisionResource+: { configMapRef: configMapRef } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { clusterDecisionResource+: { name: name } },
            '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
            withRequeueAfterSeconds(requeueAfterSeconds): { clusterDecisionResource+: { requeueAfterSeconds: requeueAfterSeconds } },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.object)]),
            withValues(values): { clusterDecisionResource+: { values: values } },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.object)]),
            withValuesMixin(values): { clusterDecisionResource+: { values+: values } },
          },
          '#clusters':: d.obj(help=''),
          clusters: {
            '#selector':: d.obj(help=''),
            selector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { clusters+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { clusters+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { clusters+: { selector+: { matchLabels: matchLabels } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { clusters+: { selector+: { matchLabels+: matchLabels } } },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { clusters+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { clusters+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { clusters+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { clusters+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { clusters+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { clusters+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { clusters+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { clusters+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { clusters+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { clusters+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { clusters+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { clusters+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { clusters+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { clusters+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { clusters+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { clusters+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { clusters+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { clusters+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { clusters+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { clusters+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { clusters+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { clusters+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { clusters+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { clusters+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { clusters+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { clusters+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { clusters+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { clusters+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { clusters+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { clusters+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { clusters+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { clusters+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { clusters+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { clusters+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { clusters+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { clusters+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { clusters+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { clusters+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { clusters+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { clusters+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { clusters+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { clusters+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { clusters+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { clusters+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { clusters+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { clusters+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { clusters+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { clusters+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { clusters+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { clusters+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { clusters+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.object)]),
            withValues(values): { clusters+: { values: values } },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.object)]),
            withValuesMixin(values): { clusters+: { values+: values } },
          },
          '#git':: d.obj(help=''),
          git: {
            '#directories':: d.obj(help=''),
            directories: {
              '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.boolean)]),
              withExclude(exclude): { exclude: exclude },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#files':: d.obj(help=''),
            files: {
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { git+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { git+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { git+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { git+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { git+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { git+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { git+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { git+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { git+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { git+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { git+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { git+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { git+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { git+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { git+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { git+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { git+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { git+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { git+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { git+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { git+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { git+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { git+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { git+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { git+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { git+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { git+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { git+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { git+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { git+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { git+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { git+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { git+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { git+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { git+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { git+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { git+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { git+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { git+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { git+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { git+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { git+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { git+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { git+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { git+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { git+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { git+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { git+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { git+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { git+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { git+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { git+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { git+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { git+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { git+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { git+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { git+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { git+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withDirectories':: d.fn(help='', args=[d.arg(name='directories', type=d.T.array)]),
            withDirectories(directories): { git+: { directories: if std.isArray(v=directories) then directories else [directories] } },
            '#withDirectoriesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='directories', type=d.T.array)]),
            withDirectoriesMixin(directories): { git+: { directories+: if std.isArray(v=directories) then directories else [directories] } },
            '#withFiles':: d.fn(help='', args=[d.arg(name='files', type=d.T.array)]),
            withFiles(files): { git+: { files: if std.isArray(v=files) then files else [files] } },
            '#withFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='files', type=d.T.array)]),
            withFilesMixin(files): { git+: { files+: if std.isArray(v=files) then files else [files] } },
            '#withPathParamPrefix':: d.fn(help='', args=[d.arg(name='pathParamPrefix', type=d.T.string)]),
            withPathParamPrefix(pathParamPrefix): { git+: { pathParamPrefix: pathParamPrefix } },
            '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
            withRepoURL(repoURL): { git+: { repoURL: repoURL } },
            '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
            withRequeueAfterSeconds(requeueAfterSeconds): { git+: { requeueAfterSeconds: requeueAfterSeconds } },
            '#withRevision':: d.fn(help='', args=[d.arg(name='revision', type=d.T.string)]),
            withRevision(revision): { git+: { revision: revision } },
          },
          '#list':: d.obj(help=''),
          list: {
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { list+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { list+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { list+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { list+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { list+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { list+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { list+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { list+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { list+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { list+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { list+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { list+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { list+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { list+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { list+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { list+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { list+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { list+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { list+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { list+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { list+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { list+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { list+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { list+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { list+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { list+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { list+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { list+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { list+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { list+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { list+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { list+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { list+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { list+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { list+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { list+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { list+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { list+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { list+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { list+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { list+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { list+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { list+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { list+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { list+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { list+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { list+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { list+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { list+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { list+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { list+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { list+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { list+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { list+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { list+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { list+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { list+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { list+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withElements':: d.fn(help='', args=[d.arg(name='elements', type=d.T.array)]),
            withElements(elements): { list+: { elements: if std.isArray(v=elements) then elements else [elements] } },
            '#withElementsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='elements', type=d.T.array)]),
            withElementsMixin(elements): { list+: { elements+: if std.isArray(v=elements) then elements else [elements] } },
            '#withElementsYaml':: d.fn(help='', args=[d.arg(name='elementsYaml', type=d.T.string)]),
            withElementsYaml(elementsYaml): { list+: { elementsYaml: elementsYaml } },
          },
          '#pullRequest':: d.obj(help=''),
          pullRequest: {
            '#bitbucketServer':: d.obj(help=''),
            bitbucketServer: {
              '#basicAuth':: d.obj(help=''),
              basicAuth: {
                '#passwordRef':: d.obj(help=''),
                passwordRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { pullRequest+: { bitbucketServer+: { basicAuth+: { passwordRef+: { key: key } } } } },
                  '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                  withSecretName(secretName): { pullRequest+: { bitbucketServer+: { basicAuth+: { passwordRef+: { secretName: secretName } } } } },
                },
                '#withUsername':: d.fn(help='', args=[d.arg(name='username', type=d.T.string)]),
                withUsername(username): { pullRequest+: { bitbucketServer+: { basicAuth+: { username: username } } } },
              },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { pullRequest+: { bitbucketServer+: { api: api } } },
              '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
              withProject(project): { pullRequest+: { bitbucketServer+: { project: project } } },
              '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
              withRepo(repo): { pullRequest+: { bitbucketServer+: { repo: repo } } },
            },
            '#filters':: d.obj(help=''),
            filters: {
              '#withBranchMatch':: d.fn(help='', args=[d.arg(name='branchMatch', type=d.T.string)]),
              withBranchMatch(branchMatch): { branchMatch: branchMatch },
            },
            '#gitea':: d.obj(help=''),
            gitea: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { pullRequest+: { gitea+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { pullRequest+: { gitea+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { pullRequest+: { gitea+: { api: api } } },
              '#withInsecure':: d.fn(help='', args=[d.arg(name='insecure', type=d.T.boolean)]),
              withInsecure(insecure): { pullRequest+: { gitea+: { insecure: insecure } } },
              '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
              withOwner(owner): { pullRequest+: { gitea+: { owner: owner } } },
              '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
              withRepo(repo): { pullRequest+: { gitea+: { repo: repo } } },
            },
            '#github':: d.obj(help=''),
            github: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { pullRequest+: { github+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { pullRequest+: { github+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { pullRequest+: { github+: { api: api } } },
              '#withAppSecretName':: d.fn(help='', args=[d.arg(name='appSecretName', type=d.T.string)]),
              withAppSecretName(appSecretName): { pullRequest+: { github+: { appSecretName: appSecretName } } },
              '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.array)]),
              withLabels(labels): { pullRequest+: { github+: { labels: if std.isArray(v=labels) then labels else [labels] } } },
              '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.array)]),
              withLabelsMixin(labels): { pullRequest+: { github+: { labels+: if std.isArray(v=labels) then labels else [labels] } } },
              '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
              withOwner(owner): { pullRequest+: { github+: { owner: owner } } },
              '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
              withRepo(repo): { pullRequest+: { github+: { repo: repo } } },
            },
            '#gitlab':: d.obj(help=''),
            gitlab: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { pullRequest+: { gitlab+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { pullRequest+: { gitlab+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { pullRequest+: { gitlab+: { api: api } } },
              '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.array)]),
              withLabels(labels): { pullRequest+: { gitlab+: { labels: if std.isArray(v=labels) then labels else [labels] } } },
              '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.array)]),
              withLabelsMixin(labels): { pullRequest+: { gitlab+: { labels+: if std.isArray(v=labels) then labels else [labels] } } },
              '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
              withProject(project): { pullRequest+: { gitlab+: { project: project } } },
              '#withPullRequestState':: d.fn(help='', args=[d.arg(name='pullRequestState', type=d.T.string)]),
              withPullRequestState(pullRequestState): { pullRequest+: { gitlab+: { pullRequestState: pullRequestState } } },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { pullRequest+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { pullRequest+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { pullRequest+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { pullRequest+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { pullRequest+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { pullRequest+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { pullRequest+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { pullRequest+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { pullRequest+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { pullRequest+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { pullRequest+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { pullRequest+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { pullRequest+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { pullRequest+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { pullRequest+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { pullRequest+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { pullRequest+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { pullRequest+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { pullRequest+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { pullRequest+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { pullRequest+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { pullRequest+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { pullRequest+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { pullRequest+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { pullRequest+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { pullRequest+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { pullRequest+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { pullRequest+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { pullRequest+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { pullRequest+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { pullRequest+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { pullRequest+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { pullRequest+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { pullRequest+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { pullRequest+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { pullRequest+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { pullRequest+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { pullRequest+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { pullRequest+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withFilters':: d.fn(help='', args=[d.arg(name='filters', type=d.T.array)]),
            withFilters(filters): { pullRequest+: { filters: if std.isArray(v=filters) then filters else [filters] } },
            '#withFiltersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
            withFiltersMixin(filters): { pullRequest+: { filters+: if std.isArray(v=filters) then filters else [filters] } },
            '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
            withRequeueAfterSeconds(requeueAfterSeconds): { pullRequest+: { requeueAfterSeconds: requeueAfterSeconds } },
          },
          '#scmProvider':: d.obj(help=''),
          scmProvider: {
            '#azureDevOps':: d.obj(help=''),
            azureDevOps: {
              '#accessTokenRef':: d.obj(help=''),
              accessTokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { azureDevOps+: { accessTokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { azureDevOps+: { accessTokenRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { azureDevOps+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { azureDevOps+: { api: api } } },
              '#withOrganization':: d.fn(help='', args=[d.arg(name='organization', type=d.T.string)]),
              withOrganization(organization): { scmProvider+: { azureDevOps+: { organization: organization } } },
              '#withTeamProject':: d.fn(help='', args=[d.arg(name='teamProject', type=d.T.string)]),
              withTeamProject(teamProject): { scmProvider+: { azureDevOps+: { teamProject: teamProject } } },
            },
            '#bitbucket':: d.obj(help=''),
            bitbucket: {
              '#appPasswordRef':: d.obj(help=''),
              appPasswordRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { bitbucket+: { appPasswordRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { bitbucket+: { appPasswordRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { bitbucket+: { allBranches: allBranches } } },
              '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
              withOwner(owner): { scmProvider+: { bitbucket+: { owner: owner } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { scmProvider+: { bitbucket+: { user: user } } },
            },
            '#bitbucketServer':: d.obj(help=''),
            bitbucketServer: {
              '#basicAuth':: d.obj(help=''),
              basicAuth: {
                '#passwordRef':: d.obj(help=''),
                passwordRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { scmProvider+: { bitbucketServer+: { basicAuth+: { passwordRef+: { key: key } } } } },
                  '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                  withSecretName(secretName): { scmProvider+: { bitbucketServer+: { basicAuth+: { passwordRef+: { secretName: secretName } } } } },
                },
                '#withUsername':: d.fn(help='', args=[d.arg(name='username', type=d.T.string)]),
                withUsername(username): { scmProvider+: { bitbucketServer+: { basicAuth+: { username: username } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { bitbucketServer+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { bitbucketServer+: { api: api } } },
              '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
              withProject(project): { scmProvider+: { bitbucketServer+: { project: project } } },
            },
            '#filters':: d.obj(help=''),
            filters: {
              '#withBranchMatch':: d.fn(help='', args=[d.arg(name='branchMatch', type=d.T.string)]),
              withBranchMatch(branchMatch): { branchMatch: branchMatch },
              '#withLabelMatch':: d.fn(help='', args=[d.arg(name='labelMatch', type=d.T.string)]),
              withLabelMatch(labelMatch): { labelMatch: labelMatch },
              '#withPathsDoNotExist':: d.fn(help='', args=[d.arg(name='pathsDoNotExist', type=d.T.array)]),
              withPathsDoNotExist(pathsDoNotExist): { pathsDoNotExist: if std.isArray(v=pathsDoNotExist) then pathsDoNotExist else [pathsDoNotExist] },
              '#withPathsDoNotExistMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='pathsDoNotExist', type=d.T.array)]),
              withPathsDoNotExistMixin(pathsDoNotExist): { pathsDoNotExist+: if std.isArray(v=pathsDoNotExist) then pathsDoNotExist else [pathsDoNotExist] },
              '#withPathsExist':: d.fn(help='', args=[d.arg(name='pathsExist', type=d.T.array)]),
              withPathsExist(pathsExist): { pathsExist: if std.isArray(v=pathsExist) then pathsExist else [pathsExist] },
              '#withPathsExistMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='pathsExist', type=d.T.array)]),
              withPathsExistMixin(pathsExist): { pathsExist+: if std.isArray(v=pathsExist) then pathsExist else [pathsExist] },
              '#withRepositoryMatch':: d.fn(help='', args=[d.arg(name='repositoryMatch', type=d.T.string)]),
              withRepositoryMatch(repositoryMatch): { repositoryMatch: repositoryMatch },
            },
            '#gitea':: d.obj(help=''),
            gitea: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { gitea+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { gitea+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { gitea+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { gitea+: { api: api } } },
              '#withInsecure':: d.fn(help='', args=[d.arg(name='insecure', type=d.T.boolean)]),
              withInsecure(insecure): { scmProvider+: { gitea+: { insecure: insecure } } },
              '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
              withOwner(owner): { scmProvider+: { gitea+: { owner: owner } } },
            },
            '#github':: d.obj(help=''),
            github: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { github+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { github+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { github+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { github+: { api: api } } },
              '#withAppSecretName':: d.fn(help='', args=[d.arg(name='appSecretName', type=d.T.string)]),
              withAppSecretName(appSecretName): { scmProvider+: { github+: { appSecretName: appSecretName } } },
              '#withOrganization':: d.fn(help='', args=[d.arg(name='organization', type=d.T.string)]),
              withOrganization(organization): { scmProvider+: { github+: { organization: organization } } },
            },
            '#gitlab':: d.obj(help=''),
            gitlab: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { gitlab+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { gitlab+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { gitlab+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { gitlab+: { api: api } } },
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { scmProvider+: { gitlab+: { group: group } } },
              '#withIncludeSubgroups':: d.fn(help='', args=[d.arg(name='includeSubgroups', type=d.T.boolean)]),
              withIncludeSubgroups(includeSubgroups): { scmProvider+: { gitlab+: { includeSubgroups: includeSubgroups } } },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { scmProvider+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { scmProvider+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { scmProvider+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { scmProvider+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { scmProvider+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { scmProvider+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { scmProvider+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { scmProvider+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { scmProvider+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { scmProvider+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { scmProvider+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { scmProvider+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { scmProvider+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { scmProvider+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { scmProvider+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { scmProvider+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { scmProvider+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { scmProvider+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { scmProvider+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { scmProvider+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { scmProvider+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { scmProvider+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { scmProvider+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { scmProvider+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { scmProvider+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { scmProvider+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { scmProvider+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { scmProvider+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { scmProvider+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { scmProvider+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { scmProvider+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { scmProvider+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { scmProvider+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { scmProvider+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { scmProvider+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { scmProvider+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { scmProvider+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { scmProvider+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { scmProvider+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withCloneProtocol':: d.fn(help='', args=[d.arg(name='cloneProtocol', type=d.T.string)]),
            withCloneProtocol(cloneProtocol): { scmProvider+: { cloneProtocol: cloneProtocol } },
            '#withFilters':: d.fn(help='', args=[d.arg(name='filters', type=d.T.array)]),
            withFilters(filters): { scmProvider+: { filters: if std.isArray(v=filters) then filters else [filters] } },
            '#withFiltersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
            withFiltersMixin(filters): { scmProvider+: { filters+: if std.isArray(v=filters) then filters else [filters] } },
            '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
            withRequeueAfterSeconds(requeueAfterSeconds): { scmProvider+: { requeueAfterSeconds: requeueAfterSeconds } },
          },
          '#selector':: d.obj(help=''),
          selector: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { selector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { selector+: { matchLabels+: matchLabels } },
          },
          '#withMatrix':: d.fn(help='', args=[d.arg(name='matrix', type=d.T.any)]),
          withMatrix(matrix): { matrix: matrix },
          '#withMerge':: d.fn(help='', args=[d.arg(name='merge', type=d.T.any)]),
          withMerge(merge): { merge: merge },
        },
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { matrix+: { template+: { metadata+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { matrix+: { template+: { metadata+: { annotations+: annotations } } } },
            '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizers(finalizers): { matrix+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizersMixin(finalizers): { matrix+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { matrix+: { template+: { metadata+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { matrix+: { template+: { metadata+: { labels+: labels } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { matrix+: { template+: { metadata+: { name: name } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { matrix+: { template+: { metadata+: { namespace: namespace } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#destination':: d.obj(help=''),
            destination: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { matrix+: { template+: { spec+: { destination+: { name: name } } } } },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { matrix+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
              '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
              withServer(server): { matrix+: { template+: { spec+: { destination+: { server: server } } } } },
            },
            '#ignoreDifferences':: d.obj(help=''),
            ignoreDifferences: {
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { group: group },
              '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { kind: kind },
              '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { namespace: namespace },
            },
            '#info':: d.obj(help=''),
            info: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#source':: d.obj(help=''),
            source: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { matrix+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { matrix+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { matrix+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { matrix+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { matrix+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { matrix+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { matrix+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { matrix+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { matrix+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { matrix+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { matrix+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { matrix+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { matrix+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { matrix+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { matrix+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { matrix+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { matrix+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { matrix+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { matrix+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { matrix+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { matrix+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { matrix+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { matrix+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { matrix+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { matrix+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { matrix+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { matrix+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { matrix+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { matrix+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { matrix+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { matrix+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { matrix+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { matrix+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { matrix+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { matrix+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { matrix+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { matrix+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { matrix+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { matrix+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { matrix+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { matrix+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { matrix+: { template+: { spec+: { source+: { chart: chart } } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { matrix+: { template+: { spec+: { source+: { path: path } } } } },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { matrix+: { template+: { spec+: { source+: { ref: ref } } } } },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { matrix+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { matrix+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
            },
            '#sources':: d.obj(help=''),
            sources: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { directory+: { exclude: exclude } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { directory+: { include: include } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { directory+: { recurse: recurse } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { helm+: { values: values } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { helm+: { version: version } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { kustomize+: { namespace: namespace } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { kustomize+: { version: version } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { plugin+: { name: name } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { chart: chart },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { ref: ref },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { repoURL: repoURL },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { targetRevision: targetRevision },
            },
            '#syncPolicy':: d.obj(help=''),
            syncPolicy: {
              '#automated':: d.obj(help=''),
              automated: {
                '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                withAllowEmpty(allowEmpty): { matrix+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                withPrune(prune): { matrix+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                withSelfHeal(selfHeal): { matrix+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
              },
              '#managedNamespaceMetadata':: d.obj(help=''),
              managedNamespaceMetadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { matrix+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { matrix+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { matrix+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { matrix+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
              },
              '#retry':: d.obj(help=''),
              retry: {
                '#backoff':: d.obj(help=''),
                backoff: {
                  '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                  withDuration(duration): { matrix+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                  '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                  withFactor(factor): { matrix+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                  '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                  withMaxDuration(maxDuration): { matrix+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                },
                '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                withLimit(limit): { matrix+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
              },
              '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptions(syncOptions): { matrix+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
              '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptionsMixin(syncOptions): { matrix+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
            },
            '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferences(ignoreDifferences): { matrix+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferencesMixin(ignoreDifferences): { matrix+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
            withInfo(info): { matrix+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
            '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
            withInfoMixin(info): { matrix+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
            '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
            withProject(project): { matrix+: { template+: { spec+: { project: project } } } },
            '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
            withRevisionHistoryLimit(revisionHistoryLimit): { matrix+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
            '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
            withSources(sources): { matrix+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
            '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
            withSourcesMixin(sources): { matrix+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
          },
        },
        '#withGenerators':: d.fn(help='', args=[d.arg(name='generators', type=d.T.array)]),
        withGenerators(generators): { matrix+: { generators: if std.isArray(v=generators) then generators else [generators] } },
        '#withGeneratorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='generators', type=d.T.array)]),
        withGeneratorsMixin(generators): { matrix+: { generators+: if std.isArray(v=generators) then generators else [generators] } },
      },
      '#merge':: d.obj(help=''),
      merge: {
        '#generators':: d.obj(help=''),
        generators: {
          '#clusterDecisionResource':: d.obj(help=''),
          clusterDecisionResource: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { clusterDecisionResource+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { clusterDecisionResource+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { clusterDecisionResource+: { labelSelector+: { matchLabels: matchLabels } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { clusterDecisionResource+: { labelSelector+: { matchLabels+: matchLabels } } },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { clusterDecisionResource+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { clusterDecisionResource+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { clusterDecisionResource+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { clusterDecisionResource+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { clusterDecisionResource+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { clusterDecisionResource+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { clusterDecisionResource+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { clusterDecisionResource+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { clusterDecisionResource+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { clusterDecisionResource+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { clusterDecisionResource+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { clusterDecisionResource+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { clusterDecisionResource+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { clusterDecisionResource+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { clusterDecisionResource+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { clusterDecisionResource+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { clusterDecisionResource+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { clusterDecisionResource+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { clusterDecisionResource+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { clusterDecisionResource+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { clusterDecisionResource+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { clusterDecisionResource+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { clusterDecisionResource+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { clusterDecisionResource+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { clusterDecisionResource+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { clusterDecisionResource+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { clusterDecisionResource+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { clusterDecisionResource+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { clusterDecisionResource+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withConfigMapRef':: d.fn(help='', args=[d.arg(name='configMapRef', type=d.T.string)]),
            withConfigMapRef(configMapRef): { clusterDecisionResource+: { configMapRef: configMapRef } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { clusterDecisionResource+: { name: name } },
            '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
            withRequeueAfterSeconds(requeueAfterSeconds): { clusterDecisionResource+: { requeueAfterSeconds: requeueAfterSeconds } },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.object)]),
            withValues(values): { clusterDecisionResource+: { values: values } },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.object)]),
            withValuesMixin(values): { clusterDecisionResource+: { values+: values } },
          },
          '#clusters':: d.obj(help=''),
          clusters: {
            '#selector':: d.obj(help=''),
            selector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { clusters+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { clusters+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { clusters+: { selector+: { matchLabels: matchLabels } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { clusters+: { selector+: { matchLabels+: matchLabels } } },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { clusters+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { clusters+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { clusters+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { clusters+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { clusters+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { clusters+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { clusters+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { clusters+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { clusters+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { clusters+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { clusters+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { clusters+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { clusters+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { clusters+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { clusters+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { clusters+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { clusters+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { clusters+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { clusters+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { clusters+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { clusters+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { clusters+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { clusters+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { clusters+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { clusters+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { clusters+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { clusters+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { clusters+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { clusters+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { clusters+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { clusters+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { clusters+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { clusters+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { clusters+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { clusters+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { clusters+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { clusters+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { clusters+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { clusters+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { clusters+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { clusters+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { clusters+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { clusters+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { clusters+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { clusters+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { clusters+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { clusters+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { clusters+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { clusters+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { clusters+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { clusters+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { clusters+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { clusters+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { clusters+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { clusters+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { clusters+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { clusters+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { clusters+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.object)]),
            withValues(values): { clusters+: { values: values } },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.object)]),
            withValuesMixin(values): { clusters+: { values+: values } },
          },
          '#git':: d.obj(help=''),
          git: {
            '#directories':: d.obj(help=''),
            directories: {
              '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.boolean)]),
              withExclude(exclude): { exclude: exclude },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#files':: d.obj(help=''),
            files: {
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { git+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { git+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { git+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { git+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { git+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { git+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { git+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { git+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { git+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { git+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { git+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { git+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { git+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { git+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { git+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { git+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { git+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { git+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { git+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { git+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { git+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { git+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { git+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { git+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { git+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { git+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { git+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { git+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { git+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { git+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { git+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { git+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { git+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { git+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { git+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { git+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { git+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { git+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { git+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { git+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { git+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { git+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { git+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { git+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { git+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { git+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { git+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { git+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { git+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { git+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { git+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { git+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { git+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { git+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { git+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { git+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { git+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { git+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { git+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { git+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { git+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { git+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { git+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withDirectories':: d.fn(help='', args=[d.arg(name='directories', type=d.T.array)]),
            withDirectories(directories): { git+: { directories: if std.isArray(v=directories) then directories else [directories] } },
            '#withDirectoriesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='directories', type=d.T.array)]),
            withDirectoriesMixin(directories): { git+: { directories+: if std.isArray(v=directories) then directories else [directories] } },
            '#withFiles':: d.fn(help='', args=[d.arg(name='files', type=d.T.array)]),
            withFiles(files): { git+: { files: if std.isArray(v=files) then files else [files] } },
            '#withFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='files', type=d.T.array)]),
            withFilesMixin(files): { git+: { files+: if std.isArray(v=files) then files else [files] } },
            '#withPathParamPrefix':: d.fn(help='', args=[d.arg(name='pathParamPrefix', type=d.T.string)]),
            withPathParamPrefix(pathParamPrefix): { git+: { pathParamPrefix: pathParamPrefix } },
            '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
            withRepoURL(repoURL): { git+: { repoURL: repoURL } },
            '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
            withRequeueAfterSeconds(requeueAfterSeconds): { git+: { requeueAfterSeconds: requeueAfterSeconds } },
            '#withRevision':: d.fn(help='', args=[d.arg(name='revision', type=d.T.string)]),
            withRevision(revision): { git+: { revision: revision } },
          },
          '#list':: d.obj(help=''),
          list: {
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { list+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { list+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { list+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { list+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { list+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { list+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { list+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { list+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { list+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { list+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { list+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { list+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { list+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { list+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { list+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { list+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { list+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { list+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { list+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { list+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { list+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { list+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { list+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { list+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { list+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { list+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { list+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { list+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { list+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { list+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { list+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { list+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { list+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { list+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { list+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { list+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { list+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { list+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { list+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { list+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { list+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { list+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { list+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { list+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { list+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { list+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { list+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { list+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { list+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { list+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { list+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { list+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { list+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { list+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { list+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { list+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { list+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { list+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { list+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { list+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { list+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { list+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { list+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withElements':: d.fn(help='', args=[d.arg(name='elements', type=d.T.array)]),
            withElements(elements): { list+: { elements: if std.isArray(v=elements) then elements else [elements] } },
            '#withElementsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='elements', type=d.T.array)]),
            withElementsMixin(elements): { list+: { elements+: if std.isArray(v=elements) then elements else [elements] } },
            '#withElementsYaml':: d.fn(help='', args=[d.arg(name='elementsYaml', type=d.T.string)]),
            withElementsYaml(elementsYaml): { list+: { elementsYaml: elementsYaml } },
          },
          '#pullRequest':: d.obj(help=''),
          pullRequest: {
            '#bitbucketServer':: d.obj(help=''),
            bitbucketServer: {
              '#basicAuth':: d.obj(help=''),
              basicAuth: {
                '#passwordRef':: d.obj(help=''),
                passwordRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { pullRequest+: { bitbucketServer+: { basicAuth+: { passwordRef+: { key: key } } } } },
                  '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                  withSecretName(secretName): { pullRequest+: { bitbucketServer+: { basicAuth+: { passwordRef+: { secretName: secretName } } } } },
                },
                '#withUsername':: d.fn(help='', args=[d.arg(name='username', type=d.T.string)]),
                withUsername(username): { pullRequest+: { bitbucketServer+: { basicAuth+: { username: username } } } },
              },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { pullRequest+: { bitbucketServer+: { api: api } } },
              '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
              withProject(project): { pullRequest+: { bitbucketServer+: { project: project } } },
              '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
              withRepo(repo): { pullRequest+: { bitbucketServer+: { repo: repo } } },
            },
            '#filters':: d.obj(help=''),
            filters: {
              '#withBranchMatch':: d.fn(help='', args=[d.arg(name='branchMatch', type=d.T.string)]),
              withBranchMatch(branchMatch): { branchMatch: branchMatch },
            },
            '#gitea':: d.obj(help=''),
            gitea: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { pullRequest+: { gitea+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { pullRequest+: { gitea+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { pullRequest+: { gitea+: { api: api } } },
              '#withInsecure':: d.fn(help='', args=[d.arg(name='insecure', type=d.T.boolean)]),
              withInsecure(insecure): { pullRequest+: { gitea+: { insecure: insecure } } },
              '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
              withOwner(owner): { pullRequest+: { gitea+: { owner: owner } } },
              '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
              withRepo(repo): { pullRequest+: { gitea+: { repo: repo } } },
            },
            '#github':: d.obj(help=''),
            github: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { pullRequest+: { github+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { pullRequest+: { github+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { pullRequest+: { github+: { api: api } } },
              '#withAppSecretName':: d.fn(help='', args=[d.arg(name='appSecretName', type=d.T.string)]),
              withAppSecretName(appSecretName): { pullRequest+: { github+: { appSecretName: appSecretName } } },
              '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.array)]),
              withLabels(labels): { pullRequest+: { github+: { labels: if std.isArray(v=labels) then labels else [labels] } } },
              '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.array)]),
              withLabelsMixin(labels): { pullRequest+: { github+: { labels+: if std.isArray(v=labels) then labels else [labels] } } },
              '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
              withOwner(owner): { pullRequest+: { github+: { owner: owner } } },
              '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
              withRepo(repo): { pullRequest+: { github+: { repo: repo } } },
            },
            '#gitlab':: d.obj(help=''),
            gitlab: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { pullRequest+: { gitlab+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { pullRequest+: { gitlab+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { pullRequest+: { gitlab+: { api: api } } },
              '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.array)]),
              withLabels(labels): { pullRequest+: { gitlab+: { labels: if std.isArray(v=labels) then labels else [labels] } } },
              '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.array)]),
              withLabelsMixin(labels): { pullRequest+: { gitlab+: { labels+: if std.isArray(v=labels) then labels else [labels] } } },
              '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
              withProject(project): { pullRequest+: { gitlab+: { project: project } } },
              '#withPullRequestState':: d.fn(help='', args=[d.arg(name='pullRequestState', type=d.T.string)]),
              withPullRequestState(pullRequestState): { pullRequest+: { gitlab+: { pullRequestState: pullRequestState } } },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { pullRequest+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { pullRequest+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { pullRequest+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { pullRequest+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { pullRequest+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { pullRequest+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { pullRequest+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { pullRequest+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { pullRequest+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { pullRequest+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { pullRequest+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { pullRequest+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { pullRequest+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { pullRequest+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { pullRequest+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { pullRequest+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { pullRequest+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { pullRequest+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { pullRequest+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { pullRequest+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { pullRequest+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { pullRequest+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { pullRequest+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { pullRequest+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { pullRequest+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { pullRequest+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { pullRequest+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { pullRequest+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { pullRequest+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { pullRequest+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { pullRequest+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { pullRequest+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { pullRequest+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { pullRequest+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { pullRequest+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { pullRequest+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { pullRequest+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { pullRequest+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { pullRequest+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withFilters':: d.fn(help='', args=[d.arg(name='filters', type=d.T.array)]),
            withFilters(filters): { pullRequest+: { filters: if std.isArray(v=filters) then filters else [filters] } },
            '#withFiltersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
            withFiltersMixin(filters): { pullRequest+: { filters+: if std.isArray(v=filters) then filters else [filters] } },
            '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
            withRequeueAfterSeconds(requeueAfterSeconds): { pullRequest+: { requeueAfterSeconds: requeueAfterSeconds } },
          },
          '#scmProvider':: d.obj(help=''),
          scmProvider: {
            '#azureDevOps':: d.obj(help=''),
            azureDevOps: {
              '#accessTokenRef':: d.obj(help=''),
              accessTokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { azureDevOps+: { accessTokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { azureDevOps+: { accessTokenRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { azureDevOps+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { azureDevOps+: { api: api } } },
              '#withOrganization':: d.fn(help='', args=[d.arg(name='organization', type=d.T.string)]),
              withOrganization(organization): { scmProvider+: { azureDevOps+: { organization: organization } } },
              '#withTeamProject':: d.fn(help='', args=[d.arg(name='teamProject', type=d.T.string)]),
              withTeamProject(teamProject): { scmProvider+: { azureDevOps+: { teamProject: teamProject } } },
            },
            '#bitbucket':: d.obj(help=''),
            bitbucket: {
              '#appPasswordRef':: d.obj(help=''),
              appPasswordRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { bitbucket+: { appPasswordRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { bitbucket+: { appPasswordRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { bitbucket+: { allBranches: allBranches } } },
              '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
              withOwner(owner): { scmProvider+: { bitbucket+: { owner: owner } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { scmProvider+: { bitbucket+: { user: user } } },
            },
            '#bitbucketServer':: d.obj(help=''),
            bitbucketServer: {
              '#basicAuth':: d.obj(help=''),
              basicAuth: {
                '#passwordRef':: d.obj(help=''),
                passwordRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { scmProvider+: { bitbucketServer+: { basicAuth+: { passwordRef+: { key: key } } } } },
                  '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                  withSecretName(secretName): { scmProvider+: { bitbucketServer+: { basicAuth+: { passwordRef+: { secretName: secretName } } } } },
                },
                '#withUsername':: d.fn(help='', args=[d.arg(name='username', type=d.T.string)]),
                withUsername(username): { scmProvider+: { bitbucketServer+: { basicAuth+: { username: username } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { bitbucketServer+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { bitbucketServer+: { api: api } } },
              '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
              withProject(project): { scmProvider+: { bitbucketServer+: { project: project } } },
            },
            '#filters':: d.obj(help=''),
            filters: {
              '#withBranchMatch':: d.fn(help='', args=[d.arg(name='branchMatch', type=d.T.string)]),
              withBranchMatch(branchMatch): { branchMatch: branchMatch },
              '#withLabelMatch':: d.fn(help='', args=[d.arg(name='labelMatch', type=d.T.string)]),
              withLabelMatch(labelMatch): { labelMatch: labelMatch },
              '#withPathsDoNotExist':: d.fn(help='', args=[d.arg(name='pathsDoNotExist', type=d.T.array)]),
              withPathsDoNotExist(pathsDoNotExist): { pathsDoNotExist: if std.isArray(v=pathsDoNotExist) then pathsDoNotExist else [pathsDoNotExist] },
              '#withPathsDoNotExistMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='pathsDoNotExist', type=d.T.array)]),
              withPathsDoNotExistMixin(pathsDoNotExist): { pathsDoNotExist+: if std.isArray(v=pathsDoNotExist) then pathsDoNotExist else [pathsDoNotExist] },
              '#withPathsExist':: d.fn(help='', args=[d.arg(name='pathsExist', type=d.T.array)]),
              withPathsExist(pathsExist): { pathsExist: if std.isArray(v=pathsExist) then pathsExist else [pathsExist] },
              '#withPathsExistMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='pathsExist', type=d.T.array)]),
              withPathsExistMixin(pathsExist): { pathsExist+: if std.isArray(v=pathsExist) then pathsExist else [pathsExist] },
              '#withRepositoryMatch':: d.fn(help='', args=[d.arg(name='repositoryMatch', type=d.T.string)]),
              withRepositoryMatch(repositoryMatch): { repositoryMatch: repositoryMatch },
            },
            '#gitea':: d.obj(help=''),
            gitea: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { gitea+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { gitea+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { gitea+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { gitea+: { api: api } } },
              '#withInsecure':: d.fn(help='', args=[d.arg(name='insecure', type=d.T.boolean)]),
              withInsecure(insecure): { scmProvider+: { gitea+: { insecure: insecure } } },
              '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
              withOwner(owner): { scmProvider+: { gitea+: { owner: owner } } },
            },
            '#github':: d.obj(help=''),
            github: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { github+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { github+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { github+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { github+: { api: api } } },
              '#withAppSecretName':: d.fn(help='', args=[d.arg(name='appSecretName', type=d.T.string)]),
              withAppSecretName(appSecretName): { scmProvider+: { github+: { appSecretName: appSecretName } } },
              '#withOrganization':: d.fn(help='', args=[d.arg(name='organization', type=d.T.string)]),
              withOrganization(organization): { scmProvider+: { github+: { organization: organization } } },
            },
            '#gitlab':: d.obj(help=''),
            gitlab: {
              '#tokenRef':: d.obj(help=''),
              tokenRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { scmProvider+: { gitlab+: { tokenRef+: { key: key } } } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { scmProvider+: { gitlab+: { tokenRef+: { secretName: secretName } } } },
              },
              '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
              withAllBranches(allBranches): { scmProvider+: { gitlab+: { allBranches: allBranches } } },
              '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
              withApi(api): { scmProvider+: { gitlab+: { api: api } } },
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { scmProvider+: { gitlab+: { group: group } } },
              '#withIncludeSubgroups':: d.fn(help='', args=[d.arg(name='includeSubgroups', type=d.T.boolean)]),
              withIncludeSubgroups(includeSubgroups): { scmProvider+: { gitlab+: { includeSubgroups: includeSubgroups } } },
            },
            '#template':: d.obj(help=''),
            template: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { scmProvider+: { template+: { metadata+: { annotations: annotations } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { scmProvider+: { template+: { metadata+: { annotations+: annotations } } } },
                '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizers(finalizers): { scmProvider+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
                withFinalizersMixin(finalizers): { scmProvider+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { scmProvider+: { template+: { metadata+: { labels: labels } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { scmProvider+: { template+: { metadata+: { labels+: labels } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { scmProvider+: { template+: { metadata+: { name: name } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { scmProvider+: { template+: { metadata+: { namespace: namespace } } } },
              },
              '#spec':: d.obj(help=''),
              spec: {
                '#destination':: d.obj(help=''),
                destination: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { scmProvider+: { template+: { spec+: { destination+: { name: name } } } } },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { scmProvider+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
                  '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                  withServer(server): { scmProvider+: { template+: { spec+: { destination+: { server: server } } } } },
                },
                '#ignoreDifferences':: d.obj(help=''),
                ignoreDifferences: {
                  '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                  withGroup(group): { group: group },
                  '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
                  withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
                  '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
                  withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { kind: kind },
                  '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
                  withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                  withNamespace(namespace): { namespace: namespace },
                },
                '#info':: d.obj(help=''),
                info: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#source':: d.obj(help=''),
                source: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { scmProvider+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { scmProvider+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { scmProvider+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { scmProvider+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { scmProvider+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { scmProvider+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { scmProvider+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { scmProvider+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { scmProvider+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { scmProvider+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { scmProvider+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { scmProvider+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { scmProvider+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { scmProvider+: { template+: { spec+: { source+: { chart: chart } } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { scmProvider+: { template+: { spec+: { source+: { path: path } } } } },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { scmProvider+: { template+: { spec+: { source+: { ref: ref } } } } },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { scmProvider+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { scmProvider+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
                },
                '#sources':: d.obj(help=''),
                sources: {
                  '#directory':: d.obj(help=''),
                  directory: {
                    '#jsonnet':: d.obj(help=''),
                    jsonnet: {
                      '#extVars':: d.obj(help=''),
                      extVars: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#tlas':: d.obj(help=''),
                      tlas: {
                        '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                        withCode(code): { code: code },
                        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                        withName(name): { name: name },
                        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                        withValue(value): { value: value },
                      },
                      '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                      withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                      '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                      withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                      '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                      '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                      withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                    },
                    '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                    withExclude(exclude): { directory+: { exclude: exclude } },
                    '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                    withInclude(include): { directory+: { include: include } },
                    '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                    withRecurse(recurse): { directory+: { recurse: recurse } },
                  },
                  '#helm':: d.obj(help=''),
                  helm: {
                    '#fileParameters':: d.obj(help=''),
                    fileParameters: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                      withForceString(forceString): { forceString: forceString },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                    withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                    '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                    withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                    withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                    '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                    withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                    '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                    withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                    '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                    withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                    withValues(values): { helm+: { values: values } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { helm+: { version: version } },
                  },
                  '#kustomize':: d.obj(help=''),
                  kustomize: {
                    '#replicas':: d.obj(help=''),
                    replicas: {
                      '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                      withCount(count): { count: count },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                    },
                    '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                    '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                    withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                    '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                    withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                    '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                    '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                    withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                    '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                    withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                    '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                    withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                    '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                    withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                    '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                    withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                    '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                    withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                    '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                    withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                    '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                    withNamespace(namespace): { kustomize+: { namespace: namespace } },
                    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                    withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                    withVersion(version): { kustomize+: { version: version } },
                  },
                  '#plugin':: d.obj(help=''),
                  plugin: {
                    '#env':: d.obj(help=''),
                    env: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#parameters':: d.obj(help=''),
                    parameters: {
                      '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                      withArray(array): { array: if std.isArray(v=array) then array else [array] },
                      '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                      withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                      '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                      withMap(map): { map: map },
                      '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                      withMapMixin(map): { map+: map },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                      withString(string): { string: string },
                    },
                    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                    withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                    withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { plugin+: { name: name } },
                    '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                    '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                    withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                  },
                  '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
                  withChart(chart): { chart: chart },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
                  withRef(ref): { ref: ref },
                  '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
                  withRepoURL(repoURL): { repoURL: repoURL },
                  '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
                  withTargetRevision(targetRevision): { targetRevision: targetRevision },
                },
                '#syncPolicy':: d.obj(help=''),
                syncPolicy: {
                  '#automated':: d.obj(help=''),
                  automated: {
                    '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                    withAllowEmpty(allowEmpty): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                    '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                    withPrune(prune): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                    '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                    withSelfHeal(selfHeal): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
                  },
                  '#managedNamespaceMetadata':: d.obj(help=''),
                  managedNamespaceMetadata: {
                    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotations(annotations): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                    withAnnotationsMixin(annotations): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabels(labels): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                    withLabelsMixin(labels): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
                  },
                  '#retry':: d.obj(help=''),
                  retry: {
                    '#backoff':: d.obj(help=''),
                    backoff: {
                      '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                      withDuration(duration): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                      '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                      withFactor(factor): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                      withMaxDuration(maxDuration): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                    },
                    '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                    withLimit(limit): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
                  },
                  '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptions(syncOptions): { scmProvider+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                  '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
                  withSyncOptionsMixin(syncOptions): { scmProvider+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
                },
                '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferences(ignoreDifferences): { scmProvider+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
                withIgnoreDifferencesMixin(ignoreDifferences): { scmProvider+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
                '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
                withInfo(info): { scmProvider+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
                '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
                withInfoMixin(info): { scmProvider+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
                '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
                withProject(project): { scmProvider+: { template+: { spec+: { project: project } } } },
                '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
                withRevisionHistoryLimit(revisionHistoryLimit): { scmProvider+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { scmProvider+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { scmProvider+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
              },
            },
            '#withCloneProtocol':: d.fn(help='', args=[d.arg(name='cloneProtocol', type=d.T.string)]),
            withCloneProtocol(cloneProtocol): { scmProvider+: { cloneProtocol: cloneProtocol } },
            '#withFilters':: d.fn(help='', args=[d.arg(name='filters', type=d.T.array)]),
            withFilters(filters): { scmProvider+: { filters: if std.isArray(v=filters) then filters else [filters] } },
            '#withFiltersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
            withFiltersMixin(filters): { scmProvider+: { filters+: if std.isArray(v=filters) then filters else [filters] } },
            '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
            withRequeueAfterSeconds(requeueAfterSeconds): { scmProvider+: { requeueAfterSeconds: requeueAfterSeconds } },
          },
          '#selector':: d.obj(help=''),
          selector: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { selector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { selector+: { matchLabels+: matchLabels } },
          },
          '#withMatrix':: d.fn(help='', args=[d.arg(name='matrix', type=d.T.any)]),
          withMatrix(matrix): { matrix: matrix },
          '#withMerge':: d.fn(help='', args=[d.arg(name='merge', type=d.T.any)]),
          withMerge(merge): { merge: merge },
        },
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { merge+: { template+: { metadata+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { merge+: { template+: { metadata+: { annotations+: annotations } } } },
            '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizers(finalizers): { merge+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizersMixin(finalizers): { merge+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { merge+: { template+: { metadata+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { merge+: { template+: { metadata+: { labels+: labels } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { merge+: { template+: { metadata+: { name: name } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { merge+: { template+: { metadata+: { namespace: namespace } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#destination':: d.obj(help=''),
            destination: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { merge+: { template+: { spec+: { destination+: { name: name } } } } },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { merge+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
              '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
              withServer(server): { merge+: { template+: { spec+: { destination+: { server: server } } } } },
            },
            '#ignoreDifferences':: d.obj(help=''),
            ignoreDifferences: {
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { group: group },
              '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { kind: kind },
              '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { namespace: namespace },
            },
            '#info':: d.obj(help=''),
            info: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#source':: d.obj(help=''),
            source: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { merge+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { merge+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { merge+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { merge+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { merge+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { merge+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { merge+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { merge+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { merge+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { merge+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { merge+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { merge+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { merge+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { merge+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { merge+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { merge+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { merge+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { merge+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { merge+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { merge+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { merge+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { merge+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { merge+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { merge+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { merge+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { merge+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { merge+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { merge+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { merge+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { merge+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { merge+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { merge+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { merge+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { merge+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { merge+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { merge+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { merge+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { merge+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { merge+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { merge+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { merge+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { merge+: { template+: { spec+: { source+: { chart: chart } } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { merge+: { template+: { spec+: { source+: { path: path } } } } },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { merge+: { template+: { spec+: { source+: { ref: ref } } } } },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { merge+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { merge+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
            },
            '#sources':: d.obj(help=''),
            sources: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { directory+: { exclude: exclude } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { directory+: { include: include } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { directory+: { recurse: recurse } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { helm+: { values: values } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { helm+: { version: version } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { kustomize+: { namespace: namespace } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { kustomize+: { version: version } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { plugin+: { name: name } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { chart: chart },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { ref: ref },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { repoURL: repoURL },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { targetRevision: targetRevision },
            },
            '#syncPolicy':: d.obj(help=''),
            syncPolicy: {
              '#automated':: d.obj(help=''),
              automated: {
                '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                withAllowEmpty(allowEmpty): { merge+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                withPrune(prune): { merge+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                withSelfHeal(selfHeal): { merge+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
              },
              '#managedNamespaceMetadata':: d.obj(help=''),
              managedNamespaceMetadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { merge+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { merge+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { merge+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { merge+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
              },
              '#retry':: d.obj(help=''),
              retry: {
                '#backoff':: d.obj(help=''),
                backoff: {
                  '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                  withDuration(duration): { merge+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                  '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                  withFactor(factor): { merge+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                  '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                  withMaxDuration(maxDuration): { merge+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                },
                '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                withLimit(limit): { merge+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
              },
              '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptions(syncOptions): { merge+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
              '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptionsMixin(syncOptions): { merge+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
            },
            '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferences(ignoreDifferences): { merge+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferencesMixin(ignoreDifferences): { merge+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
            withInfo(info): { merge+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
            '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
            withInfoMixin(info): { merge+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
            '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
            withProject(project): { merge+: { template+: { spec+: { project: project } } } },
            '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
            withRevisionHistoryLimit(revisionHistoryLimit): { merge+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
            '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
            withSources(sources): { merge+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
            '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
            withSourcesMixin(sources): { merge+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
          },
        },
        '#withGenerators':: d.fn(help='', args=[d.arg(name='generators', type=d.T.array)]),
        withGenerators(generators): { merge+: { generators: if std.isArray(v=generators) then generators else [generators] } },
        '#withGeneratorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='generators', type=d.T.array)]),
        withGeneratorsMixin(generators): { merge+: { generators+: if std.isArray(v=generators) then generators else [generators] } },
        '#withMergeKeys':: d.fn(help='', args=[d.arg(name='mergeKeys', type=d.T.array)]),
        withMergeKeys(mergeKeys): { merge+: { mergeKeys: if std.isArray(v=mergeKeys) then mergeKeys else [mergeKeys] } },
        '#withMergeKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mergeKeys', type=d.T.array)]),
        withMergeKeysMixin(mergeKeys): { merge+: { mergeKeys+: if std.isArray(v=mergeKeys) then mergeKeys else [mergeKeys] } },
      },
      '#pullRequest':: d.obj(help=''),
      pullRequest: {
        '#bitbucketServer':: d.obj(help=''),
        bitbucketServer: {
          '#basicAuth':: d.obj(help=''),
          basicAuth: {
            '#passwordRef':: d.obj(help=''),
            passwordRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { pullRequest+: { bitbucketServer+: { basicAuth+: { passwordRef+: { key: key } } } } },
              '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
              withSecretName(secretName): { pullRequest+: { bitbucketServer+: { basicAuth+: { passwordRef+: { secretName: secretName } } } } },
            },
            '#withUsername':: d.fn(help='', args=[d.arg(name='username', type=d.T.string)]),
            withUsername(username): { pullRequest+: { bitbucketServer+: { basicAuth+: { username: username } } } },
          },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { pullRequest+: { bitbucketServer+: { api: api } } },
          '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
          withProject(project): { pullRequest+: { bitbucketServer+: { project: project } } },
          '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
          withRepo(repo): { pullRequest+: { bitbucketServer+: { repo: repo } } },
        },
        '#filters':: d.obj(help=''),
        filters: {
          '#withBranchMatch':: d.fn(help='', args=[d.arg(name='branchMatch', type=d.T.string)]),
          withBranchMatch(branchMatch): { branchMatch: branchMatch },
        },
        '#gitea':: d.obj(help=''),
        gitea: {
          '#tokenRef':: d.obj(help=''),
          tokenRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { pullRequest+: { gitea+: { tokenRef+: { key: key } } } },
            '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
            withSecretName(secretName): { pullRequest+: { gitea+: { tokenRef+: { secretName: secretName } } } },
          },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { pullRequest+: { gitea+: { api: api } } },
          '#withInsecure':: d.fn(help='', args=[d.arg(name='insecure', type=d.T.boolean)]),
          withInsecure(insecure): { pullRequest+: { gitea+: { insecure: insecure } } },
          '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
          withOwner(owner): { pullRequest+: { gitea+: { owner: owner } } },
          '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
          withRepo(repo): { pullRequest+: { gitea+: { repo: repo } } },
        },
        '#github':: d.obj(help=''),
        github: {
          '#tokenRef':: d.obj(help=''),
          tokenRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { pullRequest+: { github+: { tokenRef+: { key: key } } } },
            '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
            withSecretName(secretName): { pullRequest+: { github+: { tokenRef+: { secretName: secretName } } } },
          },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { pullRequest+: { github+: { api: api } } },
          '#withAppSecretName':: d.fn(help='', args=[d.arg(name='appSecretName', type=d.T.string)]),
          withAppSecretName(appSecretName): { pullRequest+: { github+: { appSecretName: appSecretName } } },
          '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.array)]),
          withLabels(labels): { pullRequest+: { github+: { labels: if std.isArray(v=labels) then labels else [labels] } } },
          '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.array)]),
          withLabelsMixin(labels): { pullRequest+: { github+: { labels+: if std.isArray(v=labels) then labels else [labels] } } },
          '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
          withOwner(owner): { pullRequest+: { github+: { owner: owner } } },
          '#withRepo':: d.fn(help='', args=[d.arg(name='repo', type=d.T.string)]),
          withRepo(repo): { pullRequest+: { github+: { repo: repo } } },
        },
        '#gitlab':: d.obj(help=''),
        gitlab: {
          '#tokenRef':: d.obj(help=''),
          tokenRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { pullRequest+: { gitlab+: { tokenRef+: { key: key } } } },
            '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
            withSecretName(secretName): { pullRequest+: { gitlab+: { tokenRef+: { secretName: secretName } } } },
          },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { pullRequest+: { gitlab+: { api: api } } },
          '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.array)]),
          withLabels(labels): { pullRequest+: { gitlab+: { labels: if std.isArray(v=labels) then labels else [labels] } } },
          '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.array)]),
          withLabelsMixin(labels): { pullRequest+: { gitlab+: { labels+: if std.isArray(v=labels) then labels else [labels] } } },
          '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
          withProject(project): { pullRequest+: { gitlab+: { project: project } } },
          '#withPullRequestState':: d.fn(help='', args=[d.arg(name='pullRequestState', type=d.T.string)]),
          withPullRequestState(pullRequestState): { pullRequest+: { gitlab+: { pullRequestState: pullRequestState } } },
        },
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { pullRequest+: { template+: { metadata+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { pullRequest+: { template+: { metadata+: { annotations+: annotations } } } },
            '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizers(finalizers): { pullRequest+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizersMixin(finalizers): { pullRequest+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { pullRequest+: { template+: { metadata+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { pullRequest+: { template+: { metadata+: { labels+: labels } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { pullRequest+: { template+: { metadata+: { name: name } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { pullRequest+: { template+: { metadata+: { namespace: namespace } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#destination':: d.obj(help=''),
            destination: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { pullRequest+: { template+: { spec+: { destination+: { name: name } } } } },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { pullRequest+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
              '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
              withServer(server): { pullRequest+: { template+: { spec+: { destination+: { server: server } } } } },
            },
            '#ignoreDifferences':: d.obj(help=''),
            ignoreDifferences: {
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { group: group },
              '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { kind: kind },
              '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { namespace: namespace },
            },
            '#info':: d.obj(help=''),
            info: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#source':: d.obj(help=''),
            source: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { pullRequest+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { pullRequest+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { pullRequest+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { pullRequest+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { pullRequest+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { pullRequest+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { pullRequest+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { pullRequest+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { pullRequest+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { pullRequest+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { pullRequest+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { pullRequest+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { pullRequest+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { pullRequest+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { pullRequest+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { pullRequest+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { pullRequest+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { pullRequest+: { template+: { spec+: { source+: { chart: chart } } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { pullRequest+: { template+: { spec+: { source+: { path: path } } } } },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { pullRequest+: { template+: { spec+: { source+: { ref: ref } } } } },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { pullRequest+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { pullRequest+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
            },
            '#sources':: d.obj(help=''),
            sources: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { directory+: { exclude: exclude } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { directory+: { include: include } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { directory+: { recurse: recurse } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { helm+: { values: values } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { helm+: { version: version } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { kustomize+: { namespace: namespace } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { kustomize+: { version: version } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { plugin+: { name: name } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { chart: chart },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { ref: ref },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { repoURL: repoURL },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { targetRevision: targetRevision },
            },
            '#syncPolicy':: d.obj(help=''),
            syncPolicy: {
              '#automated':: d.obj(help=''),
              automated: {
                '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                withAllowEmpty(allowEmpty): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                withPrune(prune): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                withSelfHeal(selfHeal): { pullRequest+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
              },
              '#managedNamespaceMetadata':: d.obj(help=''),
              managedNamespaceMetadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { pullRequest+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
              },
              '#retry':: d.obj(help=''),
              retry: {
                '#backoff':: d.obj(help=''),
                backoff: {
                  '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                  withDuration(duration): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                  '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                  withFactor(factor): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                  '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                  withMaxDuration(maxDuration): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                },
                '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                withLimit(limit): { pullRequest+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
              },
              '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptions(syncOptions): { pullRequest+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
              '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptionsMixin(syncOptions): { pullRequest+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
            },
            '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferences(ignoreDifferences): { pullRequest+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferencesMixin(ignoreDifferences): { pullRequest+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
            withInfo(info): { pullRequest+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
            '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
            withInfoMixin(info): { pullRequest+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
            '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
            withProject(project): { pullRequest+: { template+: { spec+: { project: project } } } },
            '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
            withRevisionHistoryLimit(revisionHistoryLimit): { pullRequest+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
            '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
            withSources(sources): { pullRequest+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
            '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
            withSourcesMixin(sources): { pullRequest+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
          },
        },
        '#withFilters':: d.fn(help='', args=[d.arg(name='filters', type=d.T.array)]),
        withFilters(filters): { pullRequest+: { filters: if std.isArray(v=filters) then filters else [filters] } },
        '#withFiltersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
        withFiltersMixin(filters): { pullRequest+: { filters+: if std.isArray(v=filters) then filters else [filters] } },
        '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
        withRequeueAfterSeconds(requeueAfterSeconds): { pullRequest+: { requeueAfterSeconds: requeueAfterSeconds } },
      },
      '#scmProvider':: d.obj(help=''),
      scmProvider: {
        '#azureDevOps':: d.obj(help=''),
        azureDevOps: {
          '#accessTokenRef':: d.obj(help=''),
          accessTokenRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { scmProvider+: { azureDevOps+: { accessTokenRef+: { key: key } } } },
            '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
            withSecretName(secretName): { scmProvider+: { azureDevOps+: { accessTokenRef+: { secretName: secretName } } } },
          },
          '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
          withAllBranches(allBranches): { scmProvider+: { azureDevOps+: { allBranches: allBranches } } },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { scmProvider+: { azureDevOps+: { api: api } } },
          '#withOrganization':: d.fn(help='', args=[d.arg(name='organization', type=d.T.string)]),
          withOrganization(organization): { scmProvider+: { azureDevOps+: { organization: organization } } },
          '#withTeamProject':: d.fn(help='', args=[d.arg(name='teamProject', type=d.T.string)]),
          withTeamProject(teamProject): { scmProvider+: { azureDevOps+: { teamProject: teamProject } } },
        },
        '#bitbucket':: d.obj(help=''),
        bitbucket: {
          '#appPasswordRef':: d.obj(help=''),
          appPasswordRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { scmProvider+: { bitbucket+: { appPasswordRef+: { key: key } } } },
            '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
            withSecretName(secretName): { scmProvider+: { bitbucket+: { appPasswordRef+: { secretName: secretName } } } },
          },
          '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
          withAllBranches(allBranches): { scmProvider+: { bitbucket+: { allBranches: allBranches } } },
          '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
          withOwner(owner): { scmProvider+: { bitbucket+: { owner: owner } } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { scmProvider+: { bitbucket+: { user: user } } },
        },
        '#bitbucketServer':: d.obj(help=''),
        bitbucketServer: {
          '#basicAuth':: d.obj(help=''),
          basicAuth: {
            '#passwordRef':: d.obj(help=''),
            passwordRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { scmProvider+: { bitbucketServer+: { basicAuth+: { passwordRef+: { key: key } } } } },
              '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
              withSecretName(secretName): { scmProvider+: { bitbucketServer+: { basicAuth+: { passwordRef+: { secretName: secretName } } } } },
            },
            '#withUsername':: d.fn(help='', args=[d.arg(name='username', type=d.T.string)]),
            withUsername(username): { scmProvider+: { bitbucketServer+: { basicAuth+: { username: username } } } },
          },
          '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
          withAllBranches(allBranches): { scmProvider+: { bitbucketServer+: { allBranches: allBranches } } },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { scmProvider+: { bitbucketServer+: { api: api } } },
          '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
          withProject(project): { scmProvider+: { bitbucketServer+: { project: project } } },
        },
        '#filters':: d.obj(help=''),
        filters: {
          '#withBranchMatch':: d.fn(help='', args=[d.arg(name='branchMatch', type=d.T.string)]),
          withBranchMatch(branchMatch): { branchMatch: branchMatch },
          '#withLabelMatch':: d.fn(help='', args=[d.arg(name='labelMatch', type=d.T.string)]),
          withLabelMatch(labelMatch): { labelMatch: labelMatch },
          '#withPathsDoNotExist':: d.fn(help='', args=[d.arg(name='pathsDoNotExist', type=d.T.array)]),
          withPathsDoNotExist(pathsDoNotExist): { pathsDoNotExist: if std.isArray(v=pathsDoNotExist) then pathsDoNotExist else [pathsDoNotExist] },
          '#withPathsDoNotExistMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='pathsDoNotExist', type=d.T.array)]),
          withPathsDoNotExistMixin(pathsDoNotExist): { pathsDoNotExist+: if std.isArray(v=pathsDoNotExist) then pathsDoNotExist else [pathsDoNotExist] },
          '#withPathsExist':: d.fn(help='', args=[d.arg(name='pathsExist', type=d.T.array)]),
          withPathsExist(pathsExist): { pathsExist: if std.isArray(v=pathsExist) then pathsExist else [pathsExist] },
          '#withPathsExistMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='pathsExist', type=d.T.array)]),
          withPathsExistMixin(pathsExist): { pathsExist+: if std.isArray(v=pathsExist) then pathsExist else [pathsExist] },
          '#withRepositoryMatch':: d.fn(help='', args=[d.arg(name='repositoryMatch', type=d.T.string)]),
          withRepositoryMatch(repositoryMatch): { repositoryMatch: repositoryMatch },
        },
        '#gitea':: d.obj(help=''),
        gitea: {
          '#tokenRef':: d.obj(help=''),
          tokenRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { scmProvider+: { gitea+: { tokenRef+: { key: key } } } },
            '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
            withSecretName(secretName): { scmProvider+: { gitea+: { tokenRef+: { secretName: secretName } } } },
          },
          '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
          withAllBranches(allBranches): { scmProvider+: { gitea+: { allBranches: allBranches } } },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { scmProvider+: { gitea+: { api: api } } },
          '#withInsecure':: d.fn(help='', args=[d.arg(name='insecure', type=d.T.boolean)]),
          withInsecure(insecure): { scmProvider+: { gitea+: { insecure: insecure } } },
          '#withOwner':: d.fn(help='', args=[d.arg(name='owner', type=d.T.string)]),
          withOwner(owner): { scmProvider+: { gitea+: { owner: owner } } },
        },
        '#github':: d.obj(help=''),
        github: {
          '#tokenRef':: d.obj(help=''),
          tokenRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { scmProvider+: { github+: { tokenRef+: { key: key } } } },
            '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
            withSecretName(secretName): { scmProvider+: { github+: { tokenRef+: { secretName: secretName } } } },
          },
          '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
          withAllBranches(allBranches): { scmProvider+: { github+: { allBranches: allBranches } } },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { scmProvider+: { github+: { api: api } } },
          '#withAppSecretName':: d.fn(help='', args=[d.arg(name='appSecretName', type=d.T.string)]),
          withAppSecretName(appSecretName): { scmProvider+: { github+: { appSecretName: appSecretName } } },
          '#withOrganization':: d.fn(help='', args=[d.arg(name='organization', type=d.T.string)]),
          withOrganization(organization): { scmProvider+: { github+: { organization: organization } } },
        },
        '#gitlab':: d.obj(help=''),
        gitlab: {
          '#tokenRef':: d.obj(help=''),
          tokenRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { scmProvider+: { gitlab+: { tokenRef+: { key: key } } } },
            '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
            withSecretName(secretName): { scmProvider+: { gitlab+: { tokenRef+: { secretName: secretName } } } },
          },
          '#withAllBranches':: d.fn(help='', args=[d.arg(name='allBranches', type=d.T.boolean)]),
          withAllBranches(allBranches): { scmProvider+: { gitlab+: { allBranches: allBranches } } },
          '#withApi':: d.fn(help='', args=[d.arg(name='api', type=d.T.string)]),
          withApi(api): { scmProvider+: { gitlab+: { api: api } } },
          '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
          withGroup(group): { scmProvider+: { gitlab+: { group: group } } },
          '#withIncludeSubgroups':: d.fn(help='', args=[d.arg(name='includeSubgroups', type=d.T.boolean)]),
          withIncludeSubgroups(includeSubgroups): { scmProvider+: { gitlab+: { includeSubgroups: includeSubgroups } } },
        },
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { scmProvider+: { template+: { metadata+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { scmProvider+: { template+: { metadata+: { annotations+: annotations } } } },
            '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizers(finalizers): { scmProvider+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
            withFinalizersMixin(finalizers): { scmProvider+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { scmProvider+: { template+: { metadata+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { scmProvider+: { template+: { metadata+: { labels+: labels } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { scmProvider+: { template+: { metadata+: { name: name } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { scmProvider+: { template+: { metadata+: { namespace: namespace } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#destination':: d.obj(help=''),
            destination: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { scmProvider+: { template+: { spec+: { destination+: { name: name } } } } },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { scmProvider+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
              '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
              withServer(server): { scmProvider+: { template+: { spec+: { destination+: { server: server } } } } },
            },
            '#ignoreDifferences':: d.obj(help=''),
            ignoreDifferences: {
              '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
              withGroup(group): { group: group },
              '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
              withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
              '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
              withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { kind: kind },
              '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
              withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { namespace: namespace },
            },
            '#info':: d.obj(help=''),
            info: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#source':: d.obj(help=''),
            source: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { scmProvider+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { scmProvider+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { scmProvider+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { scmProvider+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { scmProvider+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { scmProvider+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { scmProvider+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { scmProvider+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { scmProvider+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { scmProvider+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { scmProvider+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { scmProvider+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { scmProvider+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { scmProvider+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { scmProvider+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { scmProvider+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { scmProvider+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { scmProvider+: { template+: { spec+: { source+: { chart: chart } } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { scmProvider+: { template+: { spec+: { source+: { path: path } } } } },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { scmProvider+: { template+: { spec+: { source+: { ref: ref } } } } },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { scmProvider+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { scmProvider+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
            },
            '#sources':: d.obj(help=''),
            sources: {
              '#directory':: d.obj(help=''),
              directory: {
                '#jsonnet':: d.obj(help=''),
                jsonnet: {
                  '#extVars':: d.obj(help=''),
                  extVars: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#tlas':: d.obj(help=''),
                  tlas: {
                    '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                    withCode(code): { code: code },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
                  withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
                  '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
                  withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
                  '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
                  '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
                  withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
                },
                '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
                withExclude(exclude): { directory+: { exclude: exclude } },
                '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
                withInclude(include): { directory+: { include: include } },
                '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
                withRecurse(recurse): { directory+: { recurse: recurse } },
              },
              '#helm':: d.obj(help=''),
              helm: {
                '#fileParameters':: d.obj(help=''),
                fileParameters: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
                  withForceString(forceString): { forceString: forceString },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
                withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
                '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
                withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
                withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
                '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
                withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
                '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
                withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
                '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
                withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
                withValues(values): { helm+: { values: values } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { helm+: { version: version } },
              },
              '#kustomize':: d.obj(help=''),
              kustomize: {
                '#replicas':: d.obj(help=''),
                replicas: {
                  '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
                  withCount(count): { count: count },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
                '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
                withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
                '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
                withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
                '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
                '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
                withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
                '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
                withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
                '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
                withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
                '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
                withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
                '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
                withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
                '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
                withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
                '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
                withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
                '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { kustomize+: { namespace: namespace } },
                '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
                withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
                '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
                withVersion(version): { kustomize+: { version: version } },
              },
              '#plugin':: d.obj(help=''),
              plugin: {
                '#env':: d.obj(help=''),
                env: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#parameters':: d.obj(help=''),
                parameters: {
                  '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
                  withArray(array): { array: if std.isArray(v=array) then array else [array] },
                  '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
                  withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
                  '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
                  withMap(map): { map: map },
                  '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
                  withMapMixin(map): { map+: map },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
                  withString(string): { string: string },
                },
                '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
                withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
                '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
                withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { plugin+: { name: name } },
                '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
                withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
                '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
                withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
              },
              '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
              withChart(chart): { chart: chart },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
              withRef(ref): { ref: ref },
              '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
              withRepoURL(repoURL): { repoURL: repoURL },
              '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
              withTargetRevision(targetRevision): { targetRevision: targetRevision },
            },
            '#syncPolicy':: d.obj(help=''),
            syncPolicy: {
              '#automated':: d.obj(help=''),
              automated: {
                '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
                withAllowEmpty(allowEmpty): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
                '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
                withPrune(prune): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
                '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
                withSelfHeal(selfHeal): { scmProvider+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
              },
              '#managedNamespaceMetadata':: d.obj(help=''),
              managedNamespaceMetadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { scmProvider+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
              },
              '#retry':: d.obj(help=''),
              retry: {
                '#backoff':: d.obj(help=''),
                backoff: {
                  '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
                  withDuration(duration): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
                  '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
                  withFactor(factor): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
                  '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
                  withMaxDuration(maxDuration): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
                },
                '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
                withLimit(limit): { scmProvider+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
              },
              '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptions(syncOptions): { scmProvider+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
              '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
              withSyncOptionsMixin(syncOptions): { scmProvider+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
            },
            '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferences(ignoreDifferences): { scmProvider+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
            withIgnoreDifferencesMixin(ignoreDifferences): { scmProvider+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
            '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
            withInfo(info): { scmProvider+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
            '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
            withInfoMixin(info): { scmProvider+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
            '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
            withProject(project): { scmProvider+: { template+: { spec+: { project: project } } } },
            '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
            withRevisionHistoryLimit(revisionHistoryLimit): { scmProvider+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
            '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
            withSources(sources): { scmProvider+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
            '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
            withSourcesMixin(sources): { scmProvider+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
          },
        },
        '#withCloneProtocol':: d.fn(help='', args=[d.arg(name='cloneProtocol', type=d.T.string)]),
        withCloneProtocol(cloneProtocol): { scmProvider+: { cloneProtocol: cloneProtocol } },
        '#withFilters':: d.fn(help='', args=[d.arg(name='filters', type=d.T.array)]),
        withFilters(filters): { scmProvider+: { filters: if std.isArray(v=filters) then filters else [filters] } },
        '#withFiltersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
        withFiltersMixin(filters): { scmProvider+: { filters+: if std.isArray(v=filters) then filters else [filters] } },
        '#withRequeueAfterSeconds':: d.fn(help='', args=[d.arg(name='requeueAfterSeconds', type=d.T.integer)]),
        withRequeueAfterSeconds(requeueAfterSeconds): { scmProvider+: { requeueAfterSeconds: requeueAfterSeconds } },
      },
      '#selector':: d.obj(help=''),
      selector: {
        '#matchExpressions':: d.obj(help=''),
        matchExpressions: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
          withOperator(operator): { operator: operator },
          '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
          withValues(values): { values: if std.isArray(v=values) then values else [values] },
          '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
          withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
        },
        '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
        withMatchExpressions(matchExpressions): { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
        '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
        withMatchExpressionsMixin(matchExpressions): { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
        '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { selector+: { matchLabels: matchLabels } },
        '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { selector+: { matchLabels+: matchLabels } },
      },
    },
    '#preservedFields':: d.obj(help=''),
    preservedFields: {
      '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.array)]),
      withAnnotations(annotations): { spec+: { preservedFields+: { annotations: if std.isArray(v=annotations) then annotations else [annotations] } } },
      '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.array)]),
      withAnnotationsMixin(annotations): { spec+: { preservedFields+: { annotations+: if std.isArray(v=annotations) then annotations else [annotations] } } },
    },
    '#strategy':: d.obj(help=''),
    strategy: {
      '#rollingSync':: d.obj(help=''),
      rollingSync: {
        '#steps':: d.obj(help=''),
        steps: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
          '#withMaxUpdate':: d.fn(help='', args=[d.arg(name='maxUpdate', type=d.T.any)]),
          withMaxUpdate(maxUpdate): { maxUpdate: maxUpdate },
        },
        '#withSteps':: d.fn(help='', args=[d.arg(name='steps', type=d.T.array)]),
        withSteps(steps): { spec+: { strategy+: { rollingSync+: { steps: if std.isArray(v=steps) then steps else [steps] } } } },
        '#withStepsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='steps', type=d.T.array)]),
        withStepsMixin(steps): { spec+: { strategy+: { rollingSync+: { steps+: if std.isArray(v=steps) then steps else [steps] } } } },
      },
      '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { strategy+: { type: type } } },
    },
    '#syncPolicy':: d.obj(help=''),
    syncPolicy: {
      '#withPreserveResourcesOnDeletion':: d.fn(help='', args=[d.arg(name='preserveResourcesOnDeletion', type=d.T.boolean)]),
      withPreserveResourcesOnDeletion(preserveResourcesOnDeletion): { spec+: { syncPolicy+: { preserveResourcesOnDeletion: preserveResourcesOnDeletion } } },
    },
    '#template':: d.obj(help=''),
    template: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { template+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { template+: { metadata+: { annotations+: annotations } } } },
        '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
        withFinalizers(finalizers): { spec+: { template+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
        '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
        withFinalizersMixin(finalizers): { spec+: { template+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { template+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { template+: { metadata+: { labels+: labels } } } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { template+: { metadata+: { name: name } } } },
        '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { template+: { metadata+: { namespace: namespace } } } },
      },
      '#spec':: d.obj(help=''),
      spec: {
        '#destination':: d.obj(help=''),
        destination: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { template+: { spec+: { destination+: { name: name } } } } },
          '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { spec+: { template+: { spec+: { destination+: { namespace: namespace } } } } },
          '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
          withServer(server): { spec+: { template+: { spec+: { destination+: { server: server } } } } },
        },
        '#ignoreDifferences':: d.obj(help=''),
        ignoreDifferences: {
          '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
          withGroup(group): { group: group },
          '#withJqPathExpressions':: d.fn(help='', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
          withJqPathExpressions(jqPathExpressions): { jqPathExpressions: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
          '#withJqPathExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jqPathExpressions', type=d.T.array)]),
          withJqPathExpressionsMixin(jqPathExpressions): { jqPathExpressions+: if std.isArray(v=jqPathExpressions) then jqPathExpressions else [jqPathExpressions] },
          '#withJsonPointers':: d.fn(help='', args=[d.arg(name='jsonPointers', type=d.T.array)]),
          withJsonPointers(jsonPointers): { jsonPointers: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
          '#withJsonPointersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPointers', type=d.T.array)]),
          withJsonPointersMixin(jsonPointers): { jsonPointers+: if std.isArray(v=jsonPointers) then jsonPointers else [jsonPointers] },
          '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { kind: kind },
          '#withManagedFieldsManagers':: d.fn(help='', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
          withManagedFieldsManagers(managedFieldsManagers): { managedFieldsManagers: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
          '#withManagedFieldsManagersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedFieldsManagers', type=d.T.array)]),
          withManagedFieldsManagersMixin(managedFieldsManagers): { managedFieldsManagers+: if std.isArray(v=managedFieldsManagers) then managedFieldsManagers else [managedFieldsManagers] },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { namespace: namespace },
        },
        '#info':: d.obj(help=''),
        info: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#source':: d.obj(help=''),
        source: {
          '#directory':: d.obj(help=''),
          directory: {
            '#jsonnet':: d.obj(help=''),
            jsonnet: {
              '#extVars':: d.obj(help=''),
              extVars: {
                '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                withCode(code): { code: code },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#tlas':: d.obj(help=''),
              tlas: {
                '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                withCode(code): { code: code },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
              withExtVars(extVars): { spec+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
              '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
              withExtVarsMixin(extVars): { spec+: { template+: { spec+: { source+: { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } } } } } },
              '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
              withLibs(libs): { spec+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } } } } } },
              '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
              withLibsMixin(libs): { spec+: { template+: { spec+: { source+: { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } } } } } },
              '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
              withTlas(tlas): { spec+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
              '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
              withTlasMixin(tlas): { spec+: { template+: { spec+: { source+: { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } } } } } },
            },
            '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
            withExclude(exclude): { spec+: { template+: { spec+: { source+: { directory+: { exclude: exclude } } } } } },
            '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
            withInclude(include): { spec+: { template+: { spec+: { source+: { directory+: { include: include } } } } } },
            '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
            withRecurse(recurse): { spec+: { template+: { spec+: { source+: { directory+: { recurse: recurse } } } } } },
          },
          '#helm':: d.obj(help=''),
          helm: {
            '#fileParameters':: d.obj(help=''),
            fileParameters: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#parameters':: d.obj(help=''),
            parameters: {
              '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
              withForceString(forceString): { forceString: forceString },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
            withFileParameters(fileParameters): { spec+: { template+: { spec+: { source+: { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
            '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
            withFileParametersMixin(fileParameters): { spec+: { template+: { spec+: { source+: { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } } } } } },
            '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
            withIgnoreMissingValueFiles(ignoreMissingValueFiles): { spec+: { template+: { spec+: { source+: { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } } } } } },
            '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
            withParameters(parameters): { spec+: { template+: { spec+: { source+: { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
            '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
            withParametersMixin(parameters): { spec+: { template+: { spec+: { source+: { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
            '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
            withPassCredentials(passCredentials): { spec+: { template+: { spec+: { source+: { helm+: { passCredentials: passCredentials } } } } } },
            '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
            withReleaseName(releaseName): { spec+: { template+: { spec+: { source+: { helm+: { releaseName: releaseName } } } } } },
            '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
            withSkipCrds(skipCrds): { spec+: { template+: { spec+: { source+: { helm+: { skipCrds: skipCrds } } } } } },
            '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
            withValueFiles(valueFiles): { spec+: { template+: { spec+: { source+: { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
            '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
            withValueFilesMixin(valueFiles): { spec+: { template+: { spec+: { source+: { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } } } } } },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
            withValues(values): { spec+: { template+: { spec+: { source+: { helm+: { values: values } } } } } },
            '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
            withVersion(version): { spec+: { template+: { spec+: { source+: { helm+: { version: version } } } } } },
          },
          '#kustomize':: d.obj(help=''),
          kustomize: {
            '#replicas':: d.obj(help=''),
            replicas: {
              '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
              withCount(count): { count: count },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
            withCommonAnnotations(commonAnnotations): { spec+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations: commonAnnotations } } } } } },
            '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
            withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { spec+: { template+: { spec+: { source+: { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } } } } } },
            '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
            withCommonAnnotationsMixin(commonAnnotations): { spec+: { template+: { spec+: { source+: { kustomize+: { commonAnnotations+: commonAnnotations } } } } } },
            '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
            withCommonLabels(commonLabels): { spec+: { template+: { spec+: { source+: { kustomize+: { commonLabels: commonLabels } } } } } },
            '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
            withCommonLabelsMixin(commonLabels): { spec+: { template+: { spec+: { source+: { kustomize+: { commonLabels+: commonLabels } } } } } },
            '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
            withForceCommonAnnotations(forceCommonAnnotations): { spec+: { template+: { spec+: { source+: { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } } } } } },
            '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
            withForceCommonLabels(forceCommonLabels): { spec+: { template+: { spec+: { source+: { kustomize+: { forceCommonLabels: forceCommonLabels } } } } } },
            '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
            withImages(images): { spec+: { template+: { spec+: { source+: { kustomize+: { images: if std.isArray(v=images) then images else [images] } } } } } },
            '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
            withImagesMixin(images): { spec+: { template+: { spec+: { source+: { kustomize+: { images+: if std.isArray(v=images) then images else [images] } } } } } },
            '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
            withNamePrefix(namePrefix): { spec+: { template+: { spec+: { source+: { kustomize+: { namePrefix: namePrefix } } } } } },
            '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
            withNameSuffix(nameSuffix): { spec+: { template+: { spec+: { source+: { kustomize+: { nameSuffix: nameSuffix } } } } } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { spec+: { template+: { spec+: { source+: { kustomize+: { namespace: namespace } } } } } },
            '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
            withReplicas(replicas): { spec+: { template+: { spec+: { source+: { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
            '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
            withReplicasMixin(replicas): { spec+: { template+: { spec+: { source+: { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } } } } } },
            '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
            withVersion(version): { spec+: { template+: { spec+: { source+: { kustomize+: { version: version } } } } } },
          },
          '#plugin':: d.obj(help=''),
          plugin: {
            '#env':: d.obj(help=''),
            env: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#parameters':: d.obj(help=''),
            parameters: {
              '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
              withArray(array): { array: if std.isArray(v=array) then array else [array] },
              '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
              withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
              '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
              withMap(map): { map: map },
              '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
              withMapMixin(map): { map+: map },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
              withString(string): { string: string },
            },
            '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
            withEnv(env): { spec+: { template+: { spec+: { source+: { plugin+: { env: if std.isArray(v=env) then env else [env] } } } } } },
            '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
            withEnvMixin(env): { spec+: { template+: { spec+: { source+: { plugin+: { env+: if std.isArray(v=env) then env else [env] } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { template+: { spec+: { source+: { plugin+: { name: name } } } } } },
            '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
            withParameters(parameters): { spec+: { template+: { spec+: { source+: { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
            '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
            withParametersMixin(parameters): { spec+: { template+: { spec+: { source+: { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } } } } } },
          },
          '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
          withChart(chart): { spec+: { template+: { spec+: { source+: { chart: chart } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { spec+: { template+: { spec+: { source+: { path: path } } } } },
          '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
          withRef(ref): { spec+: { template+: { spec+: { source+: { ref: ref } } } } },
          '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
          withRepoURL(repoURL): { spec+: { template+: { spec+: { source+: { repoURL: repoURL } } } } },
          '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
          withTargetRevision(targetRevision): { spec+: { template+: { spec+: { source+: { targetRevision: targetRevision } } } } },
        },
        '#sources':: d.obj(help=''),
        sources: {
          '#directory':: d.obj(help=''),
          directory: {
            '#jsonnet':: d.obj(help=''),
            jsonnet: {
              '#extVars':: d.obj(help=''),
              extVars: {
                '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                withCode(code): { code: code },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#tlas':: d.obj(help=''),
              tlas: {
                '#withCode':: d.fn(help='', args=[d.arg(name='code', type=d.T.boolean)]),
                withCode(code): { code: code },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withExtVars':: d.fn(help='', args=[d.arg(name='extVars', type=d.T.array)]),
              withExtVars(extVars): { directory+: { jsonnet+: { extVars: if std.isArray(v=extVars) then extVars else [extVars] } } },
              '#withExtVarsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extVars', type=d.T.array)]),
              withExtVarsMixin(extVars): { directory+: { jsonnet+: { extVars+: if std.isArray(v=extVars) then extVars else [extVars] } } },
              '#withLibs':: d.fn(help='', args=[d.arg(name='libs', type=d.T.array)]),
              withLibs(libs): { directory+: { jsonnet+: { libs: if std.isArray(v=libs) then libs else [libs] } } },
              '#withLibsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='libs', type=d.T.array)]),
              withLibsMixin(libs): { directory+: { jsonnet+: { libs+: if std.isArray(v=libs) then libs else [libs] } } },
              '#withTlas':: d.fn(help='', args=[d.arg(name='tlas', type=d.T.array)]),
              withTlas(tlas): { directory+: { jsonnet+: { tlas: if std.isArray(v=tlas) then tlas else [tlas] } } },
              '#withTlasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlas', type=d.T.array)]),
              withTlasMixin(tlas): { directory+: { jsonnet+: { tlas+: if std.isArray(v=tlas) then tlas else [tlas] } } },
            },
            '#withExclude':: d.fn(help='', args=[d.arg(name='exclude', type=d.T.string)]),
            withExclude(exclude): { directory+: { exclude: exclude } },
            '#withInclude':: d.fn(help='', args=[d.arg(name='include', type=d.T.string)]),
            withInclude(include): { directory+: { include: include } },
            '#withRecurse':: d.fn(help='', args=[d.arg(name='recurse', type=d.T.boolean)]),
            withRecurse(recurse): { directory+: { recurse: recurse } },
          },
          '#helm':: d.obj(help=''),
          helm: {
            '#fileParameters':: d.obj(help=''),
            fileParameters: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#parameters':: d.obj(help=''),
            parameters: {
              '#withForceString':: d.fn(help='', args=[d.arg(name='forceString', type=d.T.boolean)]),
              withForceString(forceString): { forceString: forceString },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withFileParameters':: d.fn(help='', args=[d.arg(name='fileParameters', type=d.T.array)]),
            withFileParameters(fileParameters): { helm+: { fileParameters: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
            '#withFileParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileParameters', type=d.T.array)]),
            withFileParametersMixin(fileParameters): { helm+: { fileParameters+: if std.isArray(v=fileParameters) then fileParameters else [fileParameters] } },
            '#withIgnoreMissingValueFiles':: d.fn(help='', args=[d.arg(name='ignoreMissingValueFiles', type=d.T.boolean)]),
            withIgnoreMissingValueFiles(ignoreMissingValueFiles): { helm+: { ignoreMissingValueFiles: ignoreMissingValueFiles } },
            '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
            withParameters(parameters): { helm+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
            '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
            withParametersMixin(parameters): { helm+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
            '#withPassCredentials':: d.fn(help='', args=[d.arg(name='passCredentials', type=d.T.boolean)]),
            withPassCredentials(passCredentials): { helm+: { passCredentials: passCredentials } },
            '#withReleaseName':: d.fn(help='', args=[d.arg(name='releaseName', type=d.T.string)]),
            withReleaseName(releaseName): { helm+: { releaseName: releaseName } },
            '#withSkipCrds':: d.fn(help='', args=[d.arg(name='skipCrds', type=d.T.boolean)]),
            withSkipCrds(skipCrds): { helm+: { skipCrds: skipCrds } },
            '#withValueFiles':: d.fn(help='', args=[d.arg(name='valueFiles', type=d.T.array)]),
            withValueFiles(valueFiles): { helm+: { valueFiles: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
            '#withValueFilesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='valueFiles', type=d.T.array)]),
            withValueFilesMixin(valueFiles): { helm+: { valueFiles+: if std.isArray(v=valueFiles) then valueFiles else [valueFiles] } },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.string)]),
            withValues(values): { helm+: { values: values } },
            '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
            withVersion(version): { helm+: { version: version } },
          },
          '#kustomize':: d.obj(help=''),
          kustomize: {
            '#replicas':: d.obj(help=''),
            replicas: {
              '#withCount':: d.fn(help='', args=[d.arg(name='count', type=d.T.any)]),
              withCount(count): { count: count },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#withCommonAnnotations':: d.fn(help='', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
            withCommonAnnotations(commonAnnotations): { kustomize+: { commonAnnotations: commonAnnotations } },
            '#withCommonAnnotationsEnvsubst':: d.fn(help='', args=[d.arg(name='commonAnnotationsEnvsubst', type=d.T.boolean)]),
            withCommonAnnotationsEnvsubst(commonAnnotationsEnvsubst): { kustomize+: { commonAnnotationsEnvsubst: commonAnnotationsEnvsubst } },
            '#withCommonAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonAnnotations', type=d.T.object)]),
            withCommonAnnotationsMixin(commonAnnotations): { kustomize+: { commonAnnotations+: commonAnnotations } },
            '#withCommonLabels':: d.fn(help='', args=[d.arg(name='commonLabels', type=d.T.object)]),
            withCommonLabels(commonLabels): { kustomize+: { commonLabels: commonLabels } },
            '#withCommonLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='commonLabels', type=d.T.object)]),
            withCommonLabelsMixin(commonLabels): { kustomize+: { commonLabels+: commonLabels } },
            '#withForceCommonAnnotations':: d.fn(help='', args=[d.arg(name='forceCommonAnnotations', type=d.T.boolean)]),
            withForceCommonAnnotations(forceCommonAnnotations): { kustomize+: { forceCommonAnnotations: forceCommonAnnotations } },
            '#withForceCommonLabels':: d.fn(help='', args=[d.arg(name='forceCommonLabels', type=d.T.boolean)]),
            withForceCommonLabels(forceCommonLabels): { kustomize+: { forceCommonLabels: forceCommonLabels } },
            '#withImages':: d.fn(help='', args=[d.arg(name='images', type=d.T.array)]),
            withImages(images): { kustomize+: { images: if std.isArray(v=images) then images else [images] } },
            '#withImagesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
            withImagesMixin(images): { kustomize+: { images+: if std.isArray(v=images) then images else [images] } },
            '#withNamePrefix':: d.fn(help='', args=[d.arg(name='namePrefix', type=d.T.string)]),
            withNamePrefix(namePrefix): { kustomize+: { namePrefix: namePrefix } },
            '#withNameSuffix':: d.fn(help='', args=[d.arg(name='nameSuffix', type=d.T.string)]),
            withNameSuffix(nameSuffix): { kustomize+: { nameSuffix: nameSuffix } },
            '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { kustomize+: { namespace: namespace } },
            '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.array)]),
            withReplicas(replicas): { kustomize+: { replicas: if std.isArray(v=replicas) then replicas else [replicas] } },
            '#withReplicasMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replicas', type=d.T.array)]),
            withReplicasMixin(replicas): { kustomize+: { replicas+: if std.isArray(v=replicas) then replicas else [replicas] } },
            '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
            withVersion(version): { kustomize+: { version: version } },
          },
          '#plugin':: d.obj(help=''),
          plugin: {
            '#env':: d.obj(help=''),
            env: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#parameters':: d.obj(help=''),
            parameters: {
              '#withArray':: d.fn(help='', args=[d.arg(name='array', type=d.T.array)]),
              withArray(array): { array: if std.isArray(v=array) then array else [array] },
              '#withArrayMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='array', type=d.T.array)]),
              withArrayMixin(array): { array+: if std.isArray(v=array) then array else [array] },
              '#withMap':: d.fn(help='', args=[d.arg(name='map', type=d.T.object)]),
              withMap(map): { map: map },
              '#withMapMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='map', type=d.T.object)]),
              withMapMixin(map): { map+: map },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withString':: d.fn(help='', args=[d.arg(name='string', type=d.T.string)]),
              withString(string): { string: string },
            },
            '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
            withEnv(env): { plugin+: { env: if std.isArray(v=env) then env else [env] } },
            '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
            withEnvMixin(env): { plugin+: { env+: if std.isArray(v=env) then env else [env] } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { plugin+: { name: name } },
            '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
            withParameters(parameters): { plugin+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
            '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
            withParametersMixin(parameters): { plugin+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
          },
          '#withChart':: d.fn(help='', args=[d.arg(name='chart', type=d.T.string)]),
          withChart(chart): { chart: chart },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { path: path },
          '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
          withRef(ref): { ref: ref },
          '#withRepoURL':: d.fn(help='', args=[d.arg(name='repoURL', type=d.T.string)]),
          withRepoURL(repoURL): { repoURL: repoURL },
          '#withTargetRevision':: d.fn(help='', args=[d.arg(name='targetRevision', type=d.T.string)]),
          withTargetRevision(targetRevision): { targetRevision: targetRevision },
        },
        '#syncPolicy':: d.obj(help=''),
        syncPolicy: {
          '#automated':: d.obj(help=''),
          automated: {
            '#withAllowEmpty':: d.fn(help='', args=[d.arg(name='allowEmpty', type=d.T.boolean)]),
            withAllowEmpty(allowEmpty): { spec+: { template+: { spec+: { syncPolicy+: { automated+: { allowEmpty: allowEmpty } } } } } },
            '#withPrune':: d.fn(help='', args=[d.arg(name='prune', type=d.T.boolean)]),
            withPrune(prune): { spec+: { template+: { spec+: { syncPolicy+: { automated+: { prune: prune } } } } } },
            '#withSelfHeal':: d.fn(help='', args=[d.arg(name='selfHeal', type=d.T.boolean)]),
            withSelfHeal(selfHeal): { spec+: { template+: { spec+: { syncPolicy+: { automated+: { selfHeal: selfHeal } } } } } },
          },
          '#managedNamespaceMetadata':: d.obj(help=''),
          managedNamespaceMetadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { spec+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations: annotations } } } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { spec+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { annotations+: annotations } } } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { spec+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels: labels } } } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { spec+: { template+: { spec+: { syncPolicy+: { managedNamespaceMetadata+: { labels+: labels } } } } } },
          },
          '#retry':: d.obj(help=''),
          retry: {
            '#backoff':: d.obj(help=''),
            backoff: {
              '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
              withDuration(duration): { spec+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { duration: duration } } } } } } },
              '#withFactor':: d.fn(help='', args=[d.arg(name='factor', type=d.T.integer)]),
              withFactor(factor): { spec+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { factor: factor } } } } } } },
              '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
              withMaxDuration(maxDuration): { spec+: { template+: { spec+: { syncPolicy+: { retry+: { backoff+: { maxDuration: maxDuration } } } } } } },
            },
            '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
            withLimit(limit): { spec+: { template+: { spec+: { syncPolicy+: { retry+: { limit: limit } } } } } },
          },
          '#withSyncOptions':: d.fn(help='', args=[d.arg(name='syncOptions', type=d.T.array)]),
          withSyncOptions(syncOptions): { spec+: { template+: { spec+: { syncPolicy+: { syncOptions: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
          '#withSyncOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='syncOptions', type=d.T.array)]),
          withSyncOptionsMixin(syncOptions): { spec+: { template+: { spec+: { syncPolicy+: { syncOptions+: if std.isArray(v=syncOptions) then syncOptions else [syncOptions] } } } } },
        },
        '#withIgnoreDifferences':: d.fn(help='', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
        withIgnoreDifferences(ignoreDifferences): { spec+: { template+: { spec+: { ignoreDifferences: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
        '#withIgnoreDifferencesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ignoreDifferences', type=d.T.array)]),
        withIgnoreDifferencesMixin(ignoreDifferences): { spec+: { template+: { spec+: { ignoreDifferences+: if std.isArray(v=ignoreDifferences) then ignoreDifferences else [ignoreDifferences] } } } },
        '#withInfo':: d.fn(help='', args=[d.arg(name='info', type=d.T.array)]),
        withInfo(info): { spec+: { template+: { spec+: { info: if std.isArray(v=info) then info else [info] } } } },
        '#withInfoMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='info', type=d.T.array)]),
        withInfoMixin(info): { spec+: { template+: { spec+: { info+: if std.isArray(v=info) then info else [info] } } } },
        '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
        withProject(project): { spec+: { template+: { spec+: { project: project } } } },
        '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
        withRevisionHistoryLimit(revisionHistoryLimit): { spec+: { template+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
        '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
        withSources(sources): { spec+: { template+: { spec+: { sources: if std.isArray(v=sources) then sources else [sources] } } } },
        '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
        withSourcesMixin(sources): { spec+: { template+: { spec+: { sources+: if std.isArray(v=sources) then sources else [sources] } } } },
      },
    },
    '#withGenerators':: d.fn(help='', args=[d.arg(name='generators', type=d.T.array)]),
    withGenerators(generators): { spec+: { generators: if std.isArray(v=generators) then generators else [generators] } },
    '#withGeneratorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='generators', type=d.T.array)]),
    withGeneratorsMixin(generators): { spec+: { generators+: if std.isArray(v=generators) then generators else [generators] } },
    '#withGoTemplate':: d.fn(help='', args=[d.arg(name='goTemplate', type=d.T.boolean)]),
    withGoTemplate(goTemplate): { spec+: { goTemplate: goTemplate } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
